{"version":3,"file":"static/js/637.29ea9e6b.chunk.js","mappings":"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","sources":["compenents/dashboard/TaskCard.jsx","compenents/dashboard/TaskColumn.jsx","compenents/dashboard/KanbanBoard.jsx","compenents/dashboard/KanbanHeader.jsx","compenents/dashboard/ProjectSidebar.jsx","compenents/dashboard/modal/project/CreateProjectModal.jsx","compenents/dashboard/modal/project/DeleteProjectModal.jsx","compenents/dashboard/modal/columns/CreateColumnModal.jsx","compenents/dashboard/modal/ManageUsersModal.jsx","compenents/dashboard/modal/ModalManager.jsx","compenents/dashboard/modal/tasks/AddSkillsModal.jsx","compenents/dashboard/modal/project/DescriptionModal.jsx","compenents/dashboard/modal/columns/SelectColumnToDeleteModal.jsx","compenents/dashboard/modal/columns/SelectColumnToEditModal.jsx","compenents/dashboard/modal/columns/EditColumnModal.jsx","compenents/dashboard/DashboardModals.jsx","compenents/dashboard/modal/UpgradeModal.jsx","pages/Dashboard.jsx"],"sourcesContent":["import React from 'react';\nimport authService from '../../services/authServices';\n\nconst TaskCard = ({ task, onShowDeleteModal, onEditTask, onAssignTask, currentUserRole, onShowTaskDetail }) => {\n\n    const handleDragStart = (e) => {\n        e.dataTransfer.setData('taskId', task.id);\n    };\n\n    const getPriorityColor = (priority) => {\n        switch (priority) {\n            case 'high': return '#ef4444';\n            case 'medium': return '#f59e0b';\n            case 'low': return '#10b981';\n            default: return '#6b7280';\n        }\n    };\n\n    const getPriorityLabel = (priority) => {\n        switch (priority) {\n            case 'high': return 'Haute';\n            case 'medium': return 'Moyenne';\n            case 'low': return 'Basse';\n            default: return 'Non définie';\n        }\n    };\n\n    const formatDate = (dateString) => {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('fr-FR', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n        });\n    };\n\n    return (\n        <div \n            className=\"task-card\"\n            draggable\n            onDragStart={handleDragStart}\n            onClick={() => onShowTaskDetail(task)}\n        >\n            <div className=\"task-header\">\n                <h4 className=\"task-title\">{task.title}</h4>\n                <div className=\"task-actions\">\n                    \n                    {!task.assignedTo && authService.canAccessAdmin(currentUserRole) && (\n                        <button \n                            className=\"btn-assign\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onAssignTask(task.id);\n                            }}\n                            aria-label=\"Assigner automatiquement cette tâche\"\n                            title=\"Assigner automatiquement\"\n                        >\n                            <span aria-hidden=\"true\">🎯</span>\n                        </button>\n                    )}\n                    {authService.canModifyTasks(currentUserRole) && (\n                        <button \n                            className=\"btn-edit\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onEditTask(task);\n                            }}\n                            aria-label=\"Modifier cette tâche\"\n                            title=\"Modifier la tâche\"\n                        >\n                            <span aria-hidden=\"true\">✏️</span>\n                        </button>\n                    )}\n                    {authService.canModifyTasks(currentUserRole) && (\n                        <button \n                            className=\"btn-delete\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onShowDeleteModal(task);\n                            }}\n                            aria-label=\"Supprimer cette tâche\"\n                            title=\"Supprimer la tâche\"\n                        >\n                            <span aria-hidden=\"true\">×</span>\n                        </button>\n                    )}\n                </div>\n            </div>\n\n            {task.description && (\n                <p className=\"task-description\">\n                    {task.description.length > 100 \n                        ? `${task.description.substring(0, 100)}...` \n                        : task.description\n                    }\n                </p>\n            )}\n\n            <div className=\"task-meta\">\n                <div className=\"task-priority\">\n                    <span \n                        className=\"priority-badge\"\n                        style={{ backgroundColor: getPriorityColor(task.priority) }}\n                    >\n                        {getPriorityLabel(task.priority)}\n                    </span>\n                </div>\n                \n                <div className=\"task-info\">\n                    <span className=\"task-date\">\n                        {formatDate(task.createdAt)}\n                    </span>\n                </div>\n            </div>\n\n            {task.assignedTo && (\n                <div className=\"task-assignee\">\n                    <span className=\"assignee-label\">Assigné à :</span>\n                    <span className=\"assignee-name\">\n                        {task.assignedTo.firstname} {task.assignedTo.lastname}\n                    </span>\n                </div>\n            )}\n\n            {task.requiredSkills && task.requiredSkills.length > 0 && (\n                <div className=\"task-skills\">\n                    {task.requiredSkills.map(skill => (\n                        <span key={skill.id} className=\"skill-tag\">\n                            {skill.name}\n                        </span>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default TaskCard;\n","import React, { useState } from 'react';\nimport TaskCard from './TaskCard';\n\nconst TaskColumn = ({ column, tasks, onUpdateTaskStatus, onDeleteTask, onShowDeleteModal, onAddSkills, onEditTask, onAssignTask, currentUserRole, onReorder, onShowTaskDetail }) => {\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDragOver, setIsDragOver] = useState(false);\n\n    const handleDragOver = (e) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e) => {\n        e.preventDefault();\n        const taskId = e.dataTransfer.getData('taskId');\n        if (taskId) {\n            onUpdateTaskStatus(parseInt(taskId), column.identifier);\n        }\n    };\n\n    //  drag & drop des colonnes \n    const handleHeaderDragStart = (e) => {\n        e.dataTransfer.setData('columnId', String(column.id));\n        e.dataTransfer.effectAllowed = 'move';\n        setIsDragging(true);\n    };\n\n    const handleHeaderDragEnd = (e) => {\n        setIsDragging(false);\n    };\n\n    const handleHeaderDragOver = (e) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'move';\n        setIsDragOver(true);\n    };\n\n    const handleHeaderDragLeave = (e) => {\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n            setIsDragOver(false);\n        }\n    };\n\n    const handleHeaderDrop = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsDragOver(false);\n        \n        const draggedColumnId = e.dataTransfer.getData('columnId');\n        const draggedTaskId = e.dataTransfer.getData('taskId');\n        if (draggedTaskId) {\n            return;\n        }\n        if (draggedColumnId && onReorder) {\n            const draggedId = parseInt(draggedColumnId);\n            if (!Number.isNaN(draggedId) && draggedId !== column.id) {\n                onReorder(draggedId, column.id);\n            }\n        }\n    };\n\n    return (\n        <div \n            className={`task-column ${isDragging ? 'dragging' : ''} ${isDragOver ? 'drag-over' : ''}`}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n        >\n            <div \n                className={`column-header ${isDragging ? 'dragging' : ''}`}\n                style={{ borderTopColor: column.color }}\n                draggable\n                onDragStart={handleHeaderDragStart}\n                onDragEnd={handleHeaderDragEnd}\n                onDragOver={handleHeaderDragOver}\n                onDragLeave={handleHeaderDragLeave}\n                onDrop={handleHeaderDrop}\n                title=\"Glisser pour réorganiser la colonne\"\n            >\n                <div className=\"column-title\">\n                    <h3>{column.name}</h3>\n                    <span className=\"task-count\">{tasks.length}</span>\n                </div>\n                <p className=\"column-description\">{column.description}</p>\n            </div>\n            \n            <div className=\"column-content\">\n                {tasks.length === 0 ? (\n                    <div className=\"empty-column\">\n                        <p>Aucune tâche</p>\n                    </div>\n                ) : (\n                    tasks.map(task => (\n                        <TaskCard\n                            key={task.id}\n                            task={task}\n                            onDeleteTask={onDeleteTask}\n                            onShowDeleteModal={onShowDeleteModal}\n                            onAddSkills={onAddSkills}\n                            onEditTask={onEditTask}\n                            onAssignTask={onAssignTask}\n                            currentUserRole={currentUserRole}\n                            onShowTaskDetail={onShowTaskDetail}\n                        />\n                    ))\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskColumn;\n","import React from 'react';\nimport TaskColumn from './TaskColumn';\n\nconst KanbanBoard = ({ columns, tasks, onUpdateTaskStatus, onDeleteTask, onShowDeleteModal, onAddSkills, onEditTask, onAssignTask, currentUserRole, onReorderColumns, onShowTaskDetail }) => {\n    const getTasksForColumn = (column) => {\n        return tasks.filter(task => task.column?.id === column.id || task.status === column.identifier);\n    };\n\n    return (\n        <div className=\"kanban-board\">\n            <div className=\"kanban-columns\">\n                {columns.map(column => (\n                    <TaskColumn\n                        key={column.id}\n                        column={column}\n                        tasks={getTasksForColumn(column)}\n                        onUpdateTaskStatus={onUpdateTaskStatus}\n                        onDeleteTask={onDeleteTask}\n                        onShowDeleteModal={onShowDeleteModal}\n                        onAddSkills={onAddSkills}\n                        onEditTask={onEditTask}\n                        onAssignTask={onAssignTask}\n                        currentUserRole={currentUserRole}\n                        onReorder={onReorderColumns}\n                        onShowTaskDetail={onShowTaskDetail}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default KanbanBoard;\n","import React from 'react';\n\nconst KanbanHeader = ({\n    selectedProject,\n    currentUserRole,\n    showColumnActionsMenu,\n    setShowColumnActionsMenu,\n    setShowCreateColumn,\n    setShowSelectColumnToEditModal,\n    setShowSelectColumnToDeleteModal,\n    setShowDeleteProjectModal,\n    setShowCreateTask,\n    setShowDescriptionModal,\n    handleAssignAllTasks,\n    isManager,\n    canDeleteColumns,\n    canDeleteProject,\n    canCreateTasks,\n    canAssignTasks\n}) => {\n    if (!selectedProject) {\n        return (\n            <div className=\"no-project-selected\">\n                <h2>Bienvenue sur TaskForce</h2>\n                <p>Veuillez sélectionner un projet pour commencer</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"kanban-header\">\n            <div className=\"project-info-header\">\n                <h1 \n                    className={selectedProject.name.length > 50 ? 'clickable-title' : ''}\n                    onClick={() => {\n                        if (selectedProject.name.length > 50) {\n                            setShowDescriptionModal(true);\n                        }\n                    }}\n                    title={selectedProject.name.length > 50 ? \"Cliquer pour voir le titre complet\" : \"\"}\n                >\n                    {selectedProject.name.length > 50 ? selectedProject.name.substring(0, 50) + '...' : selectedProject.name}\n                </h1>\n                {selectedProject.description && (\n                    <p \n                        className={selectedProject.description.length > 100 ? 'clickable-description' : ''}\n                        onClick={() => {\n                            if (selectedProject.description && selectedProject.description.length > 100) {\n                                setShowDescriptionModal(true);\n                            }\n                        }}\n                        title={selectedProject.description && selectedProject.description.length > 100 ? \"Cliquer pour voir la description complète\" : \"\"}\n                    >\n                        {selectedProject.description}\n                    </p>\n                )}\n                {currentUserRole && (\n                    <div className=\"current-user-role\">\n                        <span className=\"role-indicator\">\n                            {currentUserRole}\n                        </span>\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"kanban-actions\">\n                {canDeleteColumns(currentUserRole) && (\n                    <div className=\"column-actions-dropdown\">\n                        <button \n                            className=\"btn-column-actions\"\n                            onClick={() => setShowColumnActionsMenu(!showColumnActionsMenu)}\n                        >\n                            ⋮ Gérer les Colonnes\n                        </button>\n                        \n                        {showColumnActionsMenu && (\n                            <div className=\"column-actions-menu\">\n                                <button \n                                    className=\"menu-item add-column\"\n                                    onClick={() => {\n                                        setShowCreateColumn(true);\n                                        setShowColumnActionsMenu(false);\n                                    }}\n                                >\n                                    Nouvelle Colonne\n                                </button>\n                                <button \n                                    className=\"menu-item edit-columns\"\n                                    onClick={() => {\n                                        setShowColumnActionsMenu(false);\n                                        setShowSelectColumnToEditModal(true);\n                                    }}\n                                >\n                                    Modifier une Colonne\n                                </button>\n                                <button \n                                    className=\"menu-item delete-columns\"\n                                    onClick={() => {\n                                        setShowColumnActionsMenu(false);\n                                        setShowSelectColumnToDeleteModal(true);\n                                    }}\n                                >\n                                    Supprimer une Colonne\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                )}\n                \n                \n                {canAssignTasks(currentUserRole) && (\n                    <button \n                        className=\"btn-assign-all\"\n                        onClick={handleAssignAllTasks}\n                        title=\"Assigner automatiquement toutes les tâches non assignées\"\n                    >\n                         Assigner Toutes\n                    </button>\n                )}\n\n                {canDeleteProject(currentUserRole) && (\n                    <button \n                        className=\"btn-delete-project\" \n                        onClick={() => setShowDeleteProjectModal(true)}\n                        title=\"Seuls les responsables de projet peuvent supprimer des projets\"\n                    >\n                        Supprimer Projet\n                    </button>\n                )}\n                \n                {canCreateTasks(currentUserRole) && (\n                    <button \n                        className=\"btn-create-task\"\n                        onClick={() => setShowCreateTask(true)}\n                        title=\"Créer une nouvelle tâche\"\n                    >\n                        + Nouvelle Tâche\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default KanbanHeader;\n","import React from 'react';\n\nconst ProjectSidebar = ({\n    sidebarOpen,\n    setSidebarOpen,\n    projects,\n    selectedProject,\n    setSelectedProject,\n    setShowCreateProject,\n    isCreator\n}) => {\n    return (\n        <div className={`sidebar ${sidebarOpen ? 'open' : 'closed'}`}>\n            {sidebarOpen ? (\n                <>\n                    <div className=\"sidebar-header\">\n                        <h2>Mes Projets</h2>\n                        <button \n                            className=\"sidebar-toggle\"\n                            onClick={() => setSidebarOpen(false)}\n                        >\n                            ◀\n                        </button>\n                    </div>\n                    \n                    <div className=\"sidebar-content\">\n                        <button \n                            className=\"btn-create-project-sidebar\"\n                            onClick={() => setShowCreateProject(true)}\n                        >\n                            + Nouveau Projet\n                        </button>\n                        \n                        <div className=\"projects-list\">\n                            {projects.map(project => (\n                                <div \n                                    key={project.id} \n                                    className={`project-item ${selectedProject?.id === project.id ? 'active' : ''}`}\n                                    onClick={() => setSelectedProject(project)}\n                                >\n                                    <div className=\"project-info\">\n                                        <h3>{project.name}</h3>\n                                        <p>{project.description || 'Aucune description'}</p>\n                                        <small>{project.taskCount} tâches</small>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <div className=\"sidebar-closed\">\n                    <button \n                        className=\"sidebar-toggle-closed\"\n                        onClick={() => setSidebarOpen(true)}\n                        title=\"Ouvrir la liste des projets\"\n                    >\n                        <img src={require('../../assets/icons/fleche-droite.png')} alt=\"Ouvrir la liste des projets\" className=\"sidebar-toggle-icon\" />\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProjectSidebar;\n","import React, { useState } from 'react';\n\nconst CreateProjectModal = ({ onClose, onCreateProject }) => {\n    const [formData, setFormData] = useState({\n        name: '',\n        description: ''\n    });\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setErrors({});\n        \n        // Validation\n        if (!formData.name.trim()) {\n            setErrors({ name: 'Le nom du projet est requis' });\n            return;\n        }\n        \n        if (formData.name.length > 50) {\n            setErrors({ name: 'Le nom du projet ne peut pas dépasser 50 caractères' });\n            return;\n        }\n        \n        onCreateProject(formData);\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        // Limiter le nom à 50 caractères\n        if (name === 'name' && value.length > 50) {\n            return;\n        }\n        \n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n        \n        // Effacer l'erreur quand l'utilisateur corrige\n        if (errors[name]) {\n            setErrors(prev => ({ ...prev, [name]: '' }));\n        }\n    };\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h2>Créer un nouveau projet</h2>\n                    <button className=\"btn-close\" onClick={onClose}>×</button>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"modal-form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Nom du projet *</label>\n                        <input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            value={formData.name}\n                            onChange={handleChange}\n                            placeholder=\"Nom du projet (max 50 caractères)\"\n                            maxLength={50}\n                            required\n                            className={errors.name ? 'error' : ''}\n                        />\n                        <div className=\"char-counter\">\n                            {formData.name.length}/50\n                        </div>\n                        {errors.name && <div className=\"error-message\">{errors.name}</div>}\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea\n                            id=\"description\"\n                            name=\"description\"\n                            value={formData.description}\n                            onChange={handleChange}\n                            placeholder=\"Description du projet\"\n                            rows=\"4\"\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" className=\"btn-cancel\" onClick={onClose}>\n                            Annuler\n                        </button>\n                        <button type=\"submit\" className=\"btn-create\">\n                            Créer le projet\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateProjectModal;\n","import React from 'react';\n\nconst DeleteProjectModal = ({ onClose, onConfirm, project }) => {\n    return (\n        <div className=\"delete-modal-overlay\" onClick={onClose}>\n            <div className=\"delete-modal\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"delete-modal-header\">\n                    <h3>Confirmerr la suppression</h3>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n                <div className=\"delete-modal-body\">\n                    <p>Êtes-vous sûr de vouloir supprimer le projet <strong>{project.name}</strong> ?</p>\n                    <p className=\"warning\">Cette action est irréversible et supprimera tout.</p>\n                </div>\n                <div className=\"delete-modal-footer\">\n                    <button className=\"btn-secondary\" onClick={onClose}>Annuler</button>\n                    <button className=\"btn-danger\" onClick={onConfirm}>Supprimer définitivement</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DeleteProjectModal;\n","import React, { useState } from 'react';\n\nconst CreateColumnModal = ({ onClose, onCreateColumn }) => {\n    const [formData, setFormData] = useState({\n        name: '',\n        description: '',\n        color: '#6b7280'\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (formData.name.trim()) {\n            onCreateColumn(formData);\n        }\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h2>Créer une nouvelle colonne</h2>\n                    <button className=\"btn-close\" onClick={onClose}>×</button>\n                </div>\n                \n                <form className=\"modal-form\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Nom de la colonne *</label>\n                        <input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            value={formData.name}\n                            onChange={handleChange}\n                            placeholder=\"Ex: En cours, Terminé...\"\n                            required\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea\n                            id=\"description\"\n                            name=\"description\"\n                            value={formData.description}\n                            onChange={handleChange}\n                            placeholder=\"Description de la colonne...\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"color\">Couleur</label>\n                        <input\n                            type=\"color\"\n                            id=\"color\"\n                            name=\"color\"\n                            value={formData.color}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" className=\"btn-cancel\" onClick={onClose}>\n                            Annuler\n                        </button>\n                        <button type=\"submit\" className=\"btn-create\">\n                            Créer la colonne\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateColumnModal;\n","import React, { useState, useEffect } from 'react';\nimport { dashboardServices } from '../../../services/dashboard/dashboardServices';\n\nconst ManageUsersModal = ({ onClose, project, onUserUpdated }) => {\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [successMessage, setSuccessMessage] = useState('');\n    const [currentUserRole, setCurrentUserRole] = useState(null);\n    const [showAddUser, setShowAddUser] = useState(false);\n    const [email, setEmail] = useState('');\n    const [role, setRole] = useState('collaborateur');\n    const [availableUsers, setAvailableUsers] = useState([]);\n    const [showSuggestions, setShowSuggestions] = useState(false);\n\n    useEffect(() => {\n        if (project) {\n            setUsers(project.users || []);\n            // rôle de l'utilisateur \n            const currentUser = JSON.parse(localStorage.getItem('user'));\n            const currentUserInProject = project.users?.find(u => u.id === currentUser.id);\n            setCurrentUserRole(currentUserInProject?.role);\n        }\n    }, [project]);\n\n    useEffect(() => {\n        if (showAddUser) {\n            fetchAvailableUsers();\n        }\n    }, [showAddUser]);\n\n    const fetchAvailableUsers = async () => {\n        try {\n            const data = await dashboardServices.getUsers();\n            setAvailableUsers(data.users);\n        } catch (err) {\n            console.error('Erreur lors du chargement des utilisateurs:', err);\n        }\n    };\n\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value);\n        setShowSuggestions(e.target.value.length > 0);\n    };\n\n    const selectUser = (userEmail) => {\n        setEmail(userEmail);\n        setShowSuggestions(false);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!email.trim()) return;\n\n        setLoading(true);\n        setError(null);\n\n        try {\n            const data = await dashboardServices.addUserToProject(project.id, email, role);\n            setUsers(prev => [...prev, data.user]);\n            setEmail('');\n            setRole('collaborateur');\n            setError(null);\n        } catch (err) {\n            setError(err.message || 'Erreur lors de l\\'ajout de l\\'utilisateur');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRoleChange = async (userId, newRole) => {\n        try {\n            setError(null);\n            setSuccessMessage('');\n            await dashboardServices.updateUserRole(project.id, userId, newRole);\n            setUsers(prev => prev.map(user => \n                user.id === userId ? { ...user, role: newRole } : user\n            ));\n            \n            const updatedUser = users.find(user => user.id === userId);\n            setSuccessMessage(`✅ Rôle de ${updatedUser?.firstname} ${updatedUser?.lastname} mis à jour avec succès !`);\n            \n            setTimeout(() => {\n                setSuccessMessage('');\n            }, 3000);\n        } catch (err) {\n            console.error('Erreur mise à jour rôle:', err);\n            setError(err.message || 'Erreur lors de la mise à jour du rôle');\n        }\n    };\n\n    const handleRemoveUser = async (userId) => {\n        try {\n            await dashboardServices.removeUserFromProject(project.id, userId);\n            setUsers(prev => prev.filter(user => user.id !== userId));\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la suppression de l\\'utilisateur');\n        }\n    };\n\n    const isCurrentUser = (userId) => {\n        const currentUser = JSON.parse(localStorage.getItem('user'));\n        return currentUser && currentUser.id === userId;\n    };\n\n    const isCreator = (userId) => {\n        return project.createdBy && project.createdBy.id === userId;\n    };\n\n    const isAdmin = currentUserRole === 'admin';\n    const canManageUsers = currentUserRole && ['responsable_projet', 'manager'].includes(currentUserRole);\n    const isResponsableProjet = currentUserRole === 'responsable_projet';\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h2>Gérer les utilisateurs du projet</h2>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n\n                {canManageUsers && (\n                    <div className=\"modal-actions\">\n                        <button \n                            className=\"btn-add-user\"\n                            onClick={() => setShowAddUser(!showAddUser)}\n                        >\n                            {showAddUser ? '−' : '+'} Ajouter un utilisateur\n                        </button>\n                    </div>\n                )}\n\n                <div className=\"modal-body\">\n                    {error && (\n                        <div className=\"error-message\">\n                            {error}\n                        </div>\n                    )}\n                    \n                    {successMessage && (\n                        <div className=\"success-message\">\n                            {successMessage}\n                        </div>\n                    )}\n\n                    {showAddUser && (\n                        <div className=\"add-user-section\">\n                            <h3>Ajouter un nouvel utilisateur</h3>\n                            <form onSubmit={handleSubmit} className=\"add-user-form\">\n                                <div className=\"form-group\" style={{ position: 'relative' }}>\n                                    <label htmlFor=\"email\">Email de l'utilisateur *</label>\n                                    <input\n                                        type=\"email\"\n                                        id=\"email\"\n                                        value={email}\n                                        onChange={handleEmailChange}\n                                        placeholder=\"exemple@email.com\"\n                                        required\n                                    />\n                                    {showSuggestions && (\n                                        <div className=\"user-suggestions\">\n                                            {availableUsers\n                                                .filter(user => \n                                                    user.email.toLowerCase().includes(email.toLowerCase()) &&\n                                                    !users.some(u => u.id === user.id)\n                                                )\n                                                .map(user => (\n                                                    <div \n                                                        key={user.id} \n                                                        className=\"user-suggestion\"\n                                                        onClick={() => selectUser(user.email)}\n                                                    >\n                                                        <span className=\"user-name\">{user.firstname} {user.lastname}</span>\n                                                        <span className=\"user-email\">{user.email}</span>\n                                                    </div>\n                                                ))\n                                            }\n                                        </div>\n                                    )}\n                                    <small className=\"form-help\">\n                                        Tapez pour voir les suggestions d'utilisateurs\n                                    </small>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"role\">Rôle de l'utilisateur</label>\n                                    <select\n                                        id=\"role\"\n                                        value={role}\n                                        onChange={(e) => setRole(e.target.value)}\n                                        className=\"form-control\"\n                                    >\n                                        <option value=\"collaborateur\">Collaborateur</option>\n                                        <option value=\"responsable_projet\">Responsable de Projet</option>\n                                        <option value=\"manager\">Manager</option>\n                                    </select>\n                                    <small className=\"form-help\">\n                                        Les administrateurs peuvent ajouter/supprimer des utilisateurs et modifier les rôles\n                                    </small>\n                                </div>\n\n                                <div className=\"form-actions\">\n                                    <button \n                                        type=\"submit\" \n                                        className=\"btn-primary\"\n                                        disabled={loading}\n                                    >\n                                        {loading ? 'Ajout...' : 'Ajouter'}\n                                    </button>\n                                    <button \n                                        type=\"button\" \n                                        className=\"btn-secondary\"\n                                        onClick={() => {\n                                            setShowAddUser(false);\n                                            setEmail('');\n                                            setRole('collaborateur');\n                                        }}\n                                    >\n                                        Annuler\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    )}\n\n                    <div className=\"users-list\">\n                        {users.length > 0 ? (\n                            users.map(user => (\n                                <div key={user.id} className=\"user-item\">\n                                    <div className=\"user-info\">\n                                        <div className=\"user-name\">\n                                            {user.firstname} {user.lastname}\n                                        </div>\n                                        <div className=\"user-email\">{user.email}</div>\n                                        <div className=\"user-role\">\n                                            <span className={`role-badge role-${user.role}`}>\n                                                {user.role === 'responsable_projet' ? 'Responsable de Projet' : user.role === 'manager' ? 'Manager' : 'Collaborateur'}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    \n                                    {canManageUsers && !isCurrentUser(user.id) && !isCreator(user.id) && (\n                                        <div className=\"user-actions\">\n                                            <select\n                                                value={user.role}\n                                                onChange={(e) => handleRoleChange(user.id, e.target.value)}\n                                                disabled={loading}\n                                                className=\"role-select\"\n                                            >\n                                                <option value=\"collaborateur\">Collaborateur</option>\n                                                <option value=\"responsable_projet\">Responsable de Projet</option>\n                                                <option value=\"manager\">Manager</option>\n                                            </select>\n                                            \n                                            <button\n                                                onClick={() => handleRemoveUser(user.id)}\n                                                disabled={loading}\n                                                className=\"btn-remove-user\"\n                                                title=\"Supprimer de ce projet\"\n                                            >\n                                                🗑️\n                                            </button>\n                                        </div>\n                                    )}\n\n                                    {isCurrentUser(user.id) && (\n                                        <div className=\"user-actions\">\n                                            <span className=\"current-user-badge\">Vous</span>\n                                        </div>\n                                    )}\n\n                                    {isCreator(user.id) && (\n                                        <div className=\"user-actions\">\n                                            <span className=\"creator-badge\">Créateur</span>\n                                        </div>\n                                    )}\n                                </div>\n                            ))\n                        ) : (\n                            <p className=\"no-users\">Aucun utilisateur dans ce projet</p>\n                        )}\n                    </div>\n\n                    {!canManageUsers && (\n                        <div className=\"info-message\">\n                            Seuls les responsables de projet peuvent modifier les rôles et supprimer des utilisateurs.\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"modal-footer\">\n                    <button \n                        className=\"btn-secondary\" \n                        onClick={onClose}\n                        disabled={loading}\n                    >\n                        Fermer\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ManageUsersModal;\n","import React from 'react';\nimport CreateTaskModal from './tasks/CreateTaskModal';\nimport TaskModal from './tasks/TaskModal';\nimport CreateProjectModal from './project/CreateProjectModal';\nimport DeleteProjectModal from './project/DeleteProjectModal';\nimport CreateColumnModal from './columns/CreateColumnModal';\nimport ManageUsersModal from './ManageUsersModal';\n\nconst ModalManager = ({ \n    showCreateTask, setShowCreateTask, \n    showCreateProject, setShowCreateProject, \n    showCreateColumn, setShowCreateColumn, \n    showEditTask, setShowEditTask, \n    showManageUsers, setShowManageUsers, \n    showDeleteProjectModal, setShowDeleteProjectModal,\n    selectedTask, setSelectedTask,\n    selectedProject,\n    onCreateTask, onCreateProject, onCreateColumn, onUpdateTask, onUserUpdated, onDeleteProject\n}) => {\n    return (\n        <>\n            {showCreateTask && (\n                <CreateTaskModal \n                    isOpen={showCreateTask}\n                    onClose={() => setShowCreateTask(false)}\n                    onTaskCreated={onCreateTask}\n                    projectId={selectedProject?.id}\n                />\n            )}\n\n            {showCreateProject && (\n                <CreateProjectModal \n                    onClose={() => setShowCreateProject(false)}\n                    onCreateProject={onCreateProject}\n                />\n            )}\n\n            {showCreateColumn && (\n                <CreateColumnModal \n                    onClose={() => setShowCreateColumn(false)}\n                    onCreateColumn={onCreateColumn}\n                />\n            )}\n\n            {showEditTask && selectedTask && (\n                <TaskModal \n                    onClose={() => {\n                        setShowEditTask(false);\n                        setSelectedTask(null);\n                    }}\n                    onTaskUpdate={onUpdateTask}\n                    task={selectedTask}\n                    project={selectedProject}\n                    mode=\"edit\"\n                />\n            )}\n\n            {showManageUsers && (\n                <ManageUsersModal \n                    onClose={() => setShowManageUsers(false)}\n                    project={selectedProject}\n                    onUserUpdated={onUserUpdated}\n                />\n            )}\n\n            {showDeleteProjectModal && selectedProject && (\n                <DeleteProjectModal \n                    onClose={() => setShowDeleteProjectModal(false)}\n                    onConfirm={onDeleteProject}\n                    project={selectedProject}\n                />\n            )}\n        </>\n    );\n};\n\nexport default ModalManager;\n","import React, { useState, useEffect } from 'react';\nimport { dashboardServices } from '../../../../services/dashboard/dashboardServices';\n\nconst AddSkillsModal = ({ onClose, onAddSkills, taskId }) => {\n    const [skills, setSkills] = useState([]);\n    const [selectedSkills, setSelectedSkills] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetchSkills();\n    }, []);\n\n    const fetchSkills = async () => {\n        try {\n            const data = await dashboardServices.getSkills();\n            setSkills(data.skills);\n        } catch (err) {\n            console.error('Erreur lors du chargement des compétences:', err);\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (selectedSkills.length === 0) return;\n\n        setLoading(true);\n        setError(null);\n\n        try {\n            await dashboardServices.addSkillsToTask(taskId, selectedSkills);\n            onAddSkills(selectedSkills);\n            onClose();\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const toggleSkill = (skillId) => {\n        setSelectedSkills(prev => \n            prev.includes(skillId) \n                ? prev.filter(id => id !== skillId)\n                : [...prev, skillId]\n        );\n    };\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h2>Ajouter des compétences à la tâche</h2>\n                    <button className=\"btn-close\" onClick={onClose}>×</button>\n                </div>\n                \n                <form className=\"modal-form\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <label>Sélectionner les compétences requises</label>\n                        <div className=\"skills-list\">\n                            {skills.map(skill => (\n                                <label key={skill.id} className=\"skill-checkbox\">\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={selectedSkills.includes(skill.id)}\n                                        onChange={() => toggleSkill(skill.id)}\n                                    />\n                                    <span className=\"skill-name\">{skill.name}</span>\n                                    <span className=\"skill-category\">({skill.category})</span>\n                                </label>\n                            ))}\n                        </div>\n                    </div>\n\n                    {error && (\n                        <div className=\"error-message\">\n                            <p>{error}</p>\n                        </div>\n                    )}\n\n                    <div className=\"modal-actions\">\n                        <button type=\"button\" className=\"btn-cancel\" onClick={onClose}>\n                            Annuler\n                        </button>\n                        <button type=\"submit\" className=\"btn-create\" disabled={loading || selectedSkills.length === 0}>\n                            {loading ? 'Ajout en cours...' : `Ajouter ${selectedSkills.length} compétence(s)`}\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default AddSkillsModal;\n","import React from 'react';\n\nconst ProjectInfoModal = ({ isOpen, onClose, title, description }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"description-modal\" onClick={onClose}>\n      <div className=\"description-modal-content\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"description-modal-header\">\n          <h3>Informations du projet</h3>\n          <button className=\"close-button\" onClick={onClose}>\n            ×\n          </button>\n        </div>\n        <div className=\"project-info-content\">\n          <div className=\"info-section\">\n            <h4>Nom du projet</h4>\n            <p className=\"project-title\">{title}</p>\n          </div>\n          {description && (\n            <div className=\"info-section\">\n              <h4>Description</h4>\n              <p className=\"project-description\">{description}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectInfoModal;\n","import React from 'react';\n\nconst SelectColumnToDeleteModal = ({ isOpen, onClose, columns, onSelectColumn }) => {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h3>Sélectionner une colonne à supprimer</h3>\n                    <button \n                        className=\"btn-close\"\n                        onClick={onClose}\n                    >\n                        ×\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <div className=\"columns-selection\">\n                        <p className=\"selection-description\">\n                            Choisissez la colonne que vous souhaitez supprimer :\n                        </p>\n                        <div className=\"columns-list\">\n                            {columns.map(column => (\n                                <div \n                                    key={column.id} \n                                    className=\"column-selection-item\"\n                                    onClick={() => {\n                                        onSelectColumn(column);\n                                        onClose();\n                                    }}\n                                >\n                                    <div className=\"column-info\">\n                                        <div \n                                            className=\"column-color-indicator\" \n                                            style={{ backgroundColor: column.color }}\n                                        ></div>\n                                        <div className=\"column-details\">\n                                            <h4>{column.name}</h4>\n                                            <p>{column.description || 'Aucune description'}</p>\n                                            <small>{column.tasks?.length || 0} tâches</small>\n                                        </div>\n                                    </div>\n                                    <div className=\"column-actions\">\n                                        <button \n                                            className=\"btn-select-column\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                onSelectColumn(column);\n                                                onClose();\n                                            }}\n                                        >\n                                            Sélectionner\n                                        </button>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"modal-actions\">\n                        <button \n                            className=\"btn-cancel\" \n                            onClick={onClose}\n                        >\n                            Annuler\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SelectColumnToDeleteModal;\n","import React from 'react';\n\nconst SelectColumnToEditModal = ({ isOpen, onClose, columns, onSelectColumn }) => {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h3>Sélectionner une colonne à modifier</h3>\n                    <button \n                        className=\"btn-close\"\n                        onClick={onClose}\n                    >\n                        ×\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <div className=\"columns-selection\">\n                        <p className=\"selection-description\">\n                            Choisissez la colonne que vous souhaitez modifier :\n                        </p>\n                        <div className=\"columns-list\">\n                            {columns.map(column => (\n                                <div \n                                    key={column.id} \n                                    className=\"column-selection-item\"\n                                    onClick={() => {\n                                        onSelectColumn(column);\n                                        onClose();\n                                    }}\n                                >\n                                    <div className=\"column-info\">\n                                        <div \n                                            className=\"column-color-indicator\" \n                                            style={{ backgroundColor: column.color }}\n                                        ></div>\n                                        <div className=\"column-details\">\n                                            <h4>{column.name}</h4>\n                                            <p>{column.description || 'Aucune description'}</p>\n                                            <small>{column.tasks?.length || 0} tâches</small>\n                                        </div>\n                                    </div>\n                                    <div className=\"column-actions\">\n                                        <button \n                                            className=\"btn-select-column\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                onSelectColumn(column);\n                                                onClose();\n                                            }}\n                                        >\n                                            Sélectionner\n                                        </button>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"modal-actions\">\n                        <button \n                            className=\"btn-cancel\" \n                            onClick={onClose}\n                        >\n                            Annuler\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SelectColumnToEditModal;\n","import React from 'react';\n\nconst EditColumnModal = ({ isOpen, onClose, column, onUpdateColumn }) => {\n    if (!isOpen || !column) return null;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const formData = new FormData(e.target);\n        onUpdateColumn(column.id, {\n            name: formData.get('name'),\n            description: formData.get('description'),\n            color: formData.get('color')\n        });\n    };\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h3>Modifier la colonne</h3>\n                    <button \n                        className=\"btn-close\"\n                        onClick={onClose}\n                    >\n                        ×\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Nom de la colonne</label>\n                            <input \n                                type=\"text\" \n                                id=\"name\" \n                                name=\"name\" \n                                defaultValue={column.name}\n                                required \n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <textarea \n                                id=\"description\" \n                                name=\"description\" \n                                defaultValue={column.description}\n                                rows=\"3\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"color\">Couleur</label>\n                            <input \n                                type=\"color\" \n                                id=\"color\" \n                                name=\"color\" \n                                defaultValue={column.color}\n                            />\n                        </div>\n                        <div className=\"modal-actions\">\n                            <button type=\"button\" className=\"btn-cancel\" onClick={onClose}>\n                                Annuler\n                            </button>\n                            <button type=\"submit\" className=\"btn-confirm\">\n                                Modifier\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditColumnModal;\n","import React from 'react';\nimport ModalManager from './modal/ModalManager';\nimport AddSkillsModal from './modal/tasks/AddSkillsModal';\nimport TaskModal from './modal/tasks/TaskModal';\nimport ProjectInfoModal from './modal/project/DescriptionModal';\nimport SelectColumnToDeleteModal from './modal/columns/SelectColumnToDeleteModal';\nimport SelectColumnToEditModal from './modal/columns/SelectColumnToEditModal';\nimport EditColumnModal from './modal/columns/EditColumnModal';\n\nconst DashboardModals = ({ \n    //modal\n    showCreateTask, setShowCreateTask,\n    showCreateProject, setShowCreateProject,\n    showCreateColumn, setShowCreateColumn,\n    showEditTask, setShowEditTask,\n    showDeleteProjectModal, setShowDeleteProjectModal,\n    showAddSkills, setShowAddSkills,\n    showDeleteModal, setShowDeleteModal,\n    showDeleteColumnModal, setShowDeleteColumnModal,\n    showEditColumnModal, setShowEditColumnModal,\n    showSelectColumnToDeleteModal, setShowSelectColumnToDeleteModal,\n    showSelectColumnToEditModal, setShowSelectColumnToEditModal,\n    showTaskDetailModal, setShowTaskDetailModal,\n    showDescriptionModal, setShowDescriptionModal,\n     \n    selectedTask, setSelectedTask,\n    selectedProject,\n    taskToDelete, setTaskToDelete,\n    columnToDelete, setColumnToDelete,\n    columnToEdit, setColumnToEdit,\n    selectedTaskForDetail, setSelectedTaskForDetail,\n     \n    columns,\n    currentUserRole,\n     \n    onCreateTask,\n    onCreateProject,\n    onCreateColumn,\n    onUpdateTask,\n    onUserUpdated,\n    onDeleteProject,\n    onDeleteTask,\n    handleUpdateColumn,\n    handleTaskDetailUpdate,\n    fetchProjects\n}) => {\n    return (\n        <>\n            <ModalManager \n                showCreateTask={showCreateTask} setShowCreateTask={setShowCreateTask}\n                showCreateProject={showCreateProject} setShowCreateProject={setShowCreateProject}\n                showCreateColumn={showCreateColumn} setShowCreateColumn={setShowCreateColumn}\n                showEditTask={showEditTask} setShowEditTask={setShowEditTask}\n                showManageUsers={false} setShowManageUsers={() => {}}\n                showDeleteProjectModal={showDeleteProjectModal} setShowDeleteProjectModal={setShowDeleteProjectModal}\n                selectedTask={selectedTask} setSelectedTask={setSelectedTask}\n                selectedProject={selectedProject}\n                onCreateTask={onCreateTask}\n                onCreateProject={onCreateProject}\n                onCreateColumn={onCreateColumn}\n                onUpdateTask={onUpdateTask}\n                onUserUpdated={onUserUpdated}\n                onDeleteProject={onDeleteProject}\n            />\n\n            {showAddSkills && selectedTask && (\n                <AddSkillsModal \n                    onClose={() => {\n                        setShowAddSkills(false);\n                        setSelectedTask(null);\n                    }}\n                    onAddSkills={(skillIds) => {\n                        setShowAddSkills(false);\n                        setSelectedTask(null);\n                    }}\n                    taskId={selectedTask.id}\n                />\n            )}\n\n            {showDeleteModal && taskToDelete && (\n                <div className=\"delete-modal-overlay\" onClick={() => setShowDeleteModal(false)}>\n                    <div className=\"delete-modal-content\" onClick={(e) => e.stopPropagation()}>\n                        <div className=\"delete-modal-header\">\n                            <h3>Confirmer la suppression</h3>\n                            <button \n                                className=\"btn-close\"\n                                onClick={() => setShowDeleteModal(false)}\n                            >\n                                ×\n                            </button>\n                        </div>\n                        <div className=\"delete-modal-body\">\n                            <p>Êtes-vous sûr de vouloir supprimer la tâche :</p>\n                            <p className=\"task-title-confirm\">\"{taskToDelete.title}\" ?</p>\n                            <p className=\"delete-warning\">Cette action est irréversible.</p>\n                        </div>\n                        <div className=\"delete-modal-actions\">\n                            <button \n                                className=\"btn-cancel\"\n                                onClick={() => setShowDeleteModal(false)}\n                            >\n                                Annuler\n                            </button>\n                            <button \n                                className=\"btn-confirm-delete\"\n                                onClick={() => { \n                                    onDeleteTask(taskToDelete.id);\n                                    setShowDeleteModal(false);\n                                    setTaskToDelete(null);\n                                }}\n                            >\n                                Supprimer la tâche\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {showDeleteColumnModal && columnToDelete && (\n                <div className=\"delete-modal-overlay\" onClick={() => setShowDeleteColumnModal(false)}>\n                    <div className=\"delete-modal-content\" onClick={(e) => e.stopPropagation()}>\n                        <div className=\"delete-modal-header\">\n                            <h3>Confirmer la suppression de la colonne</h3>\n                            <button \n                                className=\"btn-close\"\n                                onClick={() => setShowDeleteColumnModal(false)}\n                            >\n                                ×\n                            </button>\n                        </div>\n                        <div className=\"delete-modal-body\">\n                            <p>Êtes-vous sûr de vouloir supprimer la colonne :</p>\n                            <p className=\"task-title-confirm\">\"{columnToDelete.name}\" ?</p>\n                            <p className=\"delete-warning\">Cette action est irréversible.</p>\n                        </div>\n                        <div className=\"delete-modal-actions\">\n                            <button \n                                className=\"btn-cancel\"\n                                onClick={() => setShowDeleteColumnModal(false)}\n                            >\n                                Annuler\n                            </button>\n                            <button \n                                className=\"btn-confirm-delete\"\n                                onClick={() => { \n                                    setShowDeleteColumnModal(false);\n                                    setColumnToDelete(null);\n                                }}\n                            >\n                                Supprimer la colonne\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {showEditColumnModal && columnToEdit && (\n                <EditColumnModal \n                    isOpen={showEditColumnModal}\n                    onClose={() => {\n                        setShowEditColumnModal(false);\n                        setColumnToEdit(null);\n                    }}\n                    column={columnToEdit}\n                    onUpdateColumn={handleUpdateColumn}\n                />\n            )}\n\n            {showSelectColumnToDeleteModal && (\n                <SelectColumnToDeleteModal \n                    isOpen={showSelectColumnToDeleteModal}\n                    onClose={() => setShowSelectColumnToDeleteModal(false)}\n                    columns={columns}\n                    onSelectColumn={(column) => {\n                        setColumnToDelete(column);\n                        setShowSelectColumnToDeleteModal(false);\n                        setShowDeleteColumnModal(true);\n                    }}\n                />\n            )}\n\n            {showSelectColumnToEditModal && (\n                <SelectColumnToEditModal \n                    isOpen={showSelectColumnToEditModal}\n                    onClose={() => setShowSelectColumnToEditModal(false)}\n                    columns={columns}\n                    onSelectColumn={(column) => {\n                        setColumnToEdit(column);\n                        setShowSelectColumnToEditModal(false);\n                        setShowEditColumnModal(true);\n                    }}\n                />\n            )}\n\n            {showTaskDetailModal && selectedTaskForDetail && (\n                <TaskModal \n                    task={selectedTaskForDetail}\n                    isOpen={showTaskDetailModal}\n                    onClose={() => {\n                        setShowTaskDetailModal(false);\n                        setSelectedTaskForDetail(null);\n                    }}\n                    onTaskUpdate={handleTaskDetailUpdate}\n                    project={selectedProject}\n                    mode=\"view\"\n                    currentUserRole={currentUserRole}\n                />\n            )}\n\n            {showDescriptionModal && selectedProject && (\n                <ProjectInfoModal \n                    isOpen={showDescriptionModal}\n                    onClose={() => setShowDescriptionModal(false)}\n                    title={selectedProject.name}\n                    description={selectedProject.description}\n                />\n            )}\n        </>\n    );\n};\n\nexport default DashboardModals;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst UpgradeModal = ({ isOpen, onClose }) => {\n    const navigate = useNavigate();\n\n    const handleUpgrade = () => {\n        onClose();\n        navigate('/upgrade');\n    };\n\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"modal-content upgrade-modal\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h2>🚀 Passez au Premium</h2>\n                    <button className=\"btn-close\" onClick={onClose}>×</button>\n                </div>\n\n                <div className=\"upgrade-content\">\n                    <div className=\"upgrade-icon\">\n                        <span className=\"icon\">💎</span>\n                    </div>\n                    \n                    <div className=\"upgrade-message\">\n                        <h3>Limite de 2 projets atteinte !</h3>\n                        <p>Vous avez atteint la limite de votre plan gratuit. Passez au plan Premium pour créer des projets illimités !</p>\n                    </div>\n\n                    <div className=\"premium-features\">\n                        <h4>Plan Premium - 2.00€/mois</h4>\n                        <ul>\n                            <li>✅ Projets illimités</li>\n                            <li>✅ Fonctionnalités avancées</li>\n                            <li>✅ Support prioritaire</li>\n                            <li>✅ Rapports détaillés</li>\n                        </ul>\n                    </div>\n\n                    <div className=\"modal-actions\">\n                        <button \n                            className=\"btn-secondary\" \n                            onClick={onClose}\n                        >\n                            Plus tard\n                        </button>\n                        <button \n                            className=\"btn-primary\" \n                            onClick={handleUpgrade}\n                        >\n                            Passer au Premium\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UpgradeModal;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from '../compenents/includes/header';\nimport Footer from '../compenents/includes/footer';\nimport KanbanBoard from '../compenents/dashboard/KanbanBoard';\nimport KanbanHeader from '../compenents/dashboard/KanbanHeader';\nimport ProjectSidebar from '../compenents/dashboard/ProjectSidebar';\nimport DashboardModals from '../compenents/dashboard/DashboardModals';\nimport UpgradeModal from '../compenents/dashboard/modal/UpgradeModal';\n\nimport { dashboardServices } from '../services/dashboard/dashboardServices';\nimport authService from '../services/authServices';\n\n// styles\nimport '../assets/styles/compenents/Dashboard/CreateTaskProjectModal.scss';\nimport '../assets/styles/compenents/Dashboard/ModalDelete.scss';\nimport '../assets/styles/compenents/Dashboard/TaskCard.scss';\nimport '../assets/styles/compenents/Dashboard/TaskDetailModal.scss';\nimport '../assets/styles/Dashboard.scss';\nimport '../assets/styles/compenents/Dashboard/includes/kanban.scss';\nimport '../assets/styles/compenents/Dashboard/includes/project-sidebar.scss';\nimport '../assets/styles/compenents/Dashboard/includes/task-columns.scss';\nimport '../assets/styles/compenents/Dashboard/includes/buttons.scss';\nimport '../assets/styles/compenents/Dashboard/modal/tasks/task-modals.scss';\nimport '../assets/styles/compenents/Dashboard/modal/project/project-modals.scss';\nimport '../assets/styles/compenents/Dashboard/modal/columns/column-modals.scss';\nimport '../assets/styles/compenents/Dashboard/UpgradeModal.scss';\n\nconst Dashboard = () => {\n    const [tasks, setTasks] = useState([]);\n    const [projects, setProjects] = useState([]);\n    const [columns, setColumns] = useState([]);\n    const [selectedProject, setSelectedProject] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [showCreateTask, setShowCreateTask] = useState(false);\n    const [showCreateProject, setShowCreateProject] = useState(false);\n    const [showCreateColumn, setShowCreateColumn] = useState(false);\n\n\n    const [showAddSkills, setShowAddSkills] = useState(false);\n    const [showEditTask, setShowEditTask] = useState(false);\n    const [selectedTask, setSelectedTask] = useState(null);\n    const [currentUserRole, setCurrentUserRole] = useState(null);\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n    const [taskToDelete, setTaskToDelete] = useState(null);\n    const [showDeleteProjectModal, setShowDeleteProjectModal] = useState(false);\n    const [sidebarOpen, setSidebarOpen] = useState(true);\n    const [showDeleteColumnModal, setShowDeleteColumnModal] = useState(false);\n    const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n    const [columnToDelete, setColumnToDelete] = useState(null);\n    const [showEditColumnModal, setShowEditColumnModal] = useState(false);\n    const [columnToEdit, setColumnToEdit] = useState(null);\n\n    const [showColumnActionsMenu, setShowColumnActionsMenu] = useState(false);\n\n    const [showSelectColumnToDeleteModal, setShowSelectColumnToDeleteModal] = useState(false);\n    const [showSelectColumnToEditModal, setShowSelectColumnToEditModal] = useState(false);\n    const [showTaskDetailModal, setShowTaskDetailModal] = useState(false);\n    const [selectedTaskForDetail, setSelectedTaskForDetail] = useState(null);\n    const [showDescriptionModal, setShowDescriptionModal] = useState(false);\n    const navigate = useNavigate();\n\n\n\n    const fetchProjects = async () => {\n        try {\n            const data = await dashboardServices.getProjects();\n            setProjects(data.projects);\n            if (data.projects.length > 0) {\n                setSelectedProject(data.projects[0]);\n            }\n            setLoading(false);\n        } catch (err) {\n            setError(err.message);\n            setLoading(false);\n        }\n    };\n\n    const fetchTasks = async (projectId) => {\n        try {\n            const data = await dashboardServices.getTasks(projectId);\n            setTasks(data.tasks);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const fetchColumns = async (projectId) => {\n        try {\n            const data = await dashboardServices.getColumns(projectId);\n            setColumns(data.columns);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    // drag & drop des colonnes\n    const handleReorderColumns = async (draggedColumnId, targetColumnId) => {\n        try {\n            const current = [...columns];\n            const draggedIndex = current.findIndex(c => c.id === draggedColumnId);\n            const targetIndex = current.findIndex(c => c.id === targetColumnId);\n            if (draggedIndex === -1 || targetIndex === -1) return;\n\n            const [dragged] = current.splice(draggedIndex, 1);\n            current.splice(targetIndex, 0, dragged);\n\n            const updated = current.map((c, idx) => ({ ...c, position: idx }));\n            setColumns(updated);\n\n            await Promise.all(updated.map(c =>\n                dashboardServices.updateColumn(c.id, { position: c.position })\n            ));\n        } catch (err) {\n            setError(err.message || 'Erreur lors du réordonnancement des colonnes');\n            if (selectedProject) {\n                fetchColumns(selectedProject.id);\n            }\n        }\n    };\n\n    // Edit d'une colonne\n    const handleEditColumn = (column) => {\n        setColumnToEdit(column);\n        setShowEditColumnModal(true);\n    };\n\n\n\n    const handleUpdateColumn = async (columnId, columnData) => {\n        try {\n            const data = await dashboardServices.updateColumn(columnId, columnData);\n            setColumns(prev => prev.map(col => \n                col.id === columnId ? { ...col, ...data.column } : col\n            ));\n            setShowEditColumnModal(false);\n            setColumnToEdit(null);\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la mise à jour de la colonne');\n        }\n    };\n\n\n\n    const handleCreateTask = async (taskData) => {\n        try {\n            setTasks(prev => [...prev, taskData]);\n            setShowCreateTask(false);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleCreateProject = async (projectData) => {\n        try {\n            const data = await dashboardServices.createProject(projectData);\n\n            setProjects(prev => [...prev, data.project]);\n            setSelectedProject(data.project);\n            setShowCreateProject(false);\n        } catch (err) {            \n            if (err.status === 403) {\n  \n                setShowUpgradeModal(true);\n                setShowCreateProject(false);\n                return;\n            }\n            \n            setError(err.message || 'Erreur lors de la création du projet');\n        }\n    };\n\n    const handleAssignTask = async (taskId) => {\n        if (!selectedProject) return;\n        \n        try {\n            const projectUsers = await dashboardServices.getProjectUsers(selectedProject.id);\n            if (!projectUsers || projectUsers.length === 0) {\n                setError('Aucun collaborateur n\\'est ajouté à ce projet. Veuillez d\\'abord ajouter des utilisateurs au projet avant de pouvoir assigner des tâches automatiquement.');\n                return;\n            }\n\n            const response = await dashboardServices.assignTaskAutomatically(taskId);\n            \n            setTasks(prev => prev.map(task => \n                task.id === taskId \n                    ? { ...task, assignedTo: response.assignedTo }\n                    : task\n            ));\n        } catch (err) {\n            setError(err.message || 'Erreur lors de l\\'assignation de la tâche');\n        }\n    };\n\n    const handleAssignAllTasks = async () => {\n        if (!selectedProject) return;\n        \n        try {\n            const projectUsers = await dashboardServices.getProjectUsers(selectedProject.id);\n            if (!projectUsers || projectUsers.length === 0) {\n                setError('Aucun collaborateur n\\'est ajouté à ce projet. Veuillez d\\'abord ajouter des utilisateurs au projet avant de pouvoir assigner des tâches automatiquement.');\n                return;\n            }\n\n            const response = await dashboardServices.assignAllProjectTasks(selectedProject.id);\n            \n            await fetchTasks(selectedProject.id);\n        } catch (err) {\n            setError(err.message || 'Erreur lors de l\\'assignation des tâches');\n        }\n    };\n\n    const handleCreateColumn = async (columnData) => {\n        try {\n            const data = await dashboardServices.createColumn({ ...columnData, projectId: selectedProject.id });\n            setColumns(prev => [...prev, data.column]);\n            setShowCreateColumn(false);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleUpdateTaskStatus = async (taskId, newStatus) => {\n        try {\n            await dashboardServices.updateTask(taskId, { status: newStatus });\n            setTasks(prev => prev.map(task => \n                task.id === taskId ? { ...task, status: newStatus } : task\n            ));\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await dashboardServices.deleteTask(taskId);\n            setTasks(prev => prev.filter(task => task.id !== taskId));\n            setShowDeleteModal(false);\n            setTaskToDelete(null);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleDeleteProject = async () => {\n        try {\n            await dashboardServices.deleteProject(selectedProject.id);\n            setProjects(prev => prev.filter(project => project.id !== selectedProject.id));\n            setSelectedProject(null);\n            setShowDeleteProjectModal(false);\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la suppression du projet');\n        }\n    };\n\n    const isCreator = (project) => {\n        const currentUser = JSON.parse(localStorage.getItem('user'));\n        return currentUser && project.createdBy && project.createdBy.id === currentUser.id;\n    };\n\n    const isAdmin = role => authService.isResponsableProjet(role);\n    const isManager = role => authService.canAccessAdmin(role);  \n    const canDeleteColumns = role => authService.canModifyTasks(role); \n    const canDeleteProject = role => authService.canManageProject(role); \n    const canCreateTasks = role => authService.canModifyTasks(role); \n    const canAssignTasks = role => authService.canAccessAdmin(role);  \n\n    const handleEditTask = (task) => {\n        setSelectedTask(task);\n        setShowEditTask(true);\n    };\n\n    const handleUpdateTask = async (taskId, taskData) => {\n        try {\n            const data = await dashboardServices.updateTask(taskId, taskData);\n            \n            await fetchTasks(selectedProject.id);\n            setShowEditTask(false);\n            setSelectedTask(null);\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    const handleShowTaskDetail = (task) => {\n        setSelectedTaskForDetail(task);\n        setShowTaskDetailModal(true);\n    };\n\n    const handleTaskDetailUpdate = async () => {\n        if (selectedProject) {\n            await fetchTasks(selectedProject.id);\n            await fetchColumns(selectedProject.id);\n            \n            if (selectedTaskForDetail) {\n                const updatedTasks = await dashboardServices.getTasks(selectedProject.id);\n                if (updatedTasks && Array.isArray(updatedTasks)) {\n                    const updatedTask = updatedTasks.find(t => t.id === selectedTaskForDetail.id);\n                    if (updatedTask) {\n                        setSelectedTaskForDetail(updatedTask);\n                    }\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchProjects();\n    }, []);\n\n    useEffect(() => {\n        if (selectedProject) {\n            const currentUser = JSON.parse(localStorage.getItem('user'));\n            if (currentUser) {\n                const currentUserInProject = selectedProject.users?.find(u => u.id === currentUser.id);\n                const role = currentUserInProject?.role;\n                setCurrentUserRole(role);\n                authService.setCurrentUserRole(role);\n            } else {\n                setCurrentUserRole(null);\n                authService.setCurrentUserRole(null);\n            }\n        }\n    }, [selectedProject]);\n\n    useEffect(() => {\n        if (selectedProject) {\n            fetchTasks(selectedProject.id);\n            fetchColumns(selectedProject.id);\n        }\n    }, [selectedProject]);\n\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (showColumnActionsMenu && !event.target.closest('.column-actions-dropdown')) {\n                setShowColumnActionsMenu(false);\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [showColumnActionsMenu]);\n\n    if (loading) {\n        return (\n            <div className=\"dashboard-container\">\n                <Header />\n                <div className=\"loading-spinner\">\n                    <div className=\"spinner\"></div>\n                    <p>Chargement du tableau...</p>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"dashboard-container\">\n                <Header />\n                <div className=\"error-container\">\n                    <h2>Erreur</h2>\n                    <p>{error}</p>\n                    <button onClick={() => window.location.reload()}>Réessayer</button>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n        return (\n    <div className=\"dashboard-container\">  \n        <Header />\n            \n            <div className=\"dashboard-layout\">\n                <ProjectSidebar \n                    sidebarOpen={sidebarOpen}\n                    setSidebarOpen={setSidebarOpen}\n                    projects={projects}\n                    selectedProject={selectedProject}\n                    setSelectedProject={setSelectedProject}\n                    setShowCreateProject={setShowCreateProject}\n                    isCreator={isCreator}\n                />\n\n                <div className=\"main-content\">\n                    <KanbanHeader \n                        selectedProject={selectedProject}\n                        currentUserRole={currentUserRole}\n                        showColumnActionsMenu={showColumnActionsMenu}\n                        setShowColumnActionsMenu={setShowColumnActionsMenu}\n                        setShowCreateColumn={setShowCreateColumn}\n                        setShowSelectColumnToEditModal={setShowSelectColumnToEditModal}\n                        setShowSelectColumnToDeleteModal={setShowSelectColumnToDeleteModal}\n                        setShowDeleteProjectModal={setShowDeleteProjectModal}\n                        setShowCreateTask={setShowCreateTask}\n                        setShowDescriptionModal={setShowDescriptionModal}\n                        handleAssignAllTasks={handleAssignAllTasks}\n                        isManager={isManager}\n                        canDeleteColumns={canDeleteColumns}\n                        canDeleteProject={canDeleteProject}\n                        canCreateTasks={canCreateTasks}\n                        canAssignTasks={canAssignTasks}\n                    />\n\n                {selectedProject && (\n                    <KanbanBoard \n                        columns={columns}\n                        tasks={tasks}\n                        onUpdateTaskStatus={handleUpdateTaskStatus}\n                        onDeleteTask={handleDeleteTask}\n                        onShowDeleteModal={(task) => {\n                            setTaskToDelete(task);\n                            setShowDeleteModal(true);\n                        }}\n                        onAddSkills={(task) => {\n                            setSelectedTask(task);\n                            setShowAddSkills(true);\n                        }}\n                        onEditTask={handleEditTask}\n                        onAssignTask={handleAssignTask}\n                        currentUserRole={currentUserRole}\n                        onReorderColumns={handleReorderColumns}\n                        onShowTaskDetail={handleShowTaskDetail}\n                    />\n                )}\n            </div>\n        </div>\n\n            <DashboardModals  \n            //MOdal\n                showCreateTask={showCreateTask} setShowCreateTask={setShowCreateTask}\n                showCreateProject={showCreateProject} setShowCreateProject={setShowCreateProject}\n                showCreateColumn={showCreateColumn} setShowCreateColumn={setShowCreateColumn}\n                showEditTask={showEditTask} setShowEditTask={setShowEditTask}\n                showDeleteProjectModal={showDeleteProjectModal} setShowDeleteProjectModal={setShowDeleteProjectModal}\n                showAddSkills={showAddSkills} setShowAddSkills={setShowAddSkills}\n                showDeleteModal={showDeleteModal} setShowDeleteModal={setShowDeleteModal}\n                showDeleteColumnModal={showDeleteColumnModal} setShowDeleteColumnModal={setShowDeleteColumnModal}\n                showEditColumnModal={showEditColumnModal} setShowEditColumnModal={setShowEditColumnModal}\n                showSelectColumnToDeleteModal={showSelectColumnToDeleteModal} setShowSelectColumnToDeleteModal={setShowSelectColumnToDeleteModal}\n                showSelectColumnToEditModal={showSelectColumnToEditModal} setShowSelectColumnToEditModal={setShowSelectColumnToEditModal}\n                showTaskDetailModal={showTaskDetailModal} setShowTaskDetailModal={setShowTaskDetailModal}\n                showDescriptionModal={showDescriptionModal} setShowDescriptionModal={setShowDescriptionModal}\n                 \n                selectedTask={selectedTask} setSelectedTask={setSelectedTask}\n                selectedProject={selectedProject}\n                taskToDelete={taskToDelete} setTaskToDelete={setTaskToDelete}\n                columnToDelete={columnToDelete} setColumnToDelete={setColumnToDelete}\n                columnToEdit={columnToEdit} setColumnToEdit={setColumnToEdit}\n                selectedTaskForDetail={selectedTaskForDetail} setSelectedTaskForDetail={setSelectedTaskForDetail}\n                 \n                columns={columns}\n                currentUserRole={currentUserRole}\n                 \n                onCreateTask={handleCreateTask}\n                onCreateProject={handleCreateProject}\n                onCreateColumn={handleCreateColumn}\n                onUpdateTask={handleUpdateTask}\n                onUserUpdated={() => fetchProjects()}\n                onDeleteProject={handleDeleteProject}\n                onDeleteTask={handleDeleteTask}\n                handleUpdateColumn={handleUpdateColumn}\n                handleTaskDetailUpdate={handleTaskDetailUpdate}\n                fetchProjects={fetchProjects}\n            />\n\n            <UpgradeModal \n                isOpen={showUpgradeModal}\n                onClose={() => setShowUpgradeModal(false)}\n            />\n\n        <Footer />\n    </div>\n    );\n};\n\nexport default Dashboard;"],"names":["_ref","task","onShowDeleteModal","onEditTask","onAssignTask","currentUserRole","onShowTaskDetail","_jsxs","className","draggable","onDragStart","e","dataTransfer","setData","id","onClick","children","_jsx","title","assignedTo","authService","canAccessAdmin","stopPropagation","canModifyTasks","description","length","concat","substring","style","backgroundColor","priority","getPriorityColor","getPriorityLabel","dateString","createdAt","Date","toLocaleDateString","day","month","year","firstname","lastname","requiredSkills","map","skill","name","column","tasks","onUpdateTaskStatus","onDeleteTask","onAddSkills","onReorder","isDragging","setIsDragging","useState","isDragOver","setIsDragOver","onDragOver","preventDefault","onDrop","taskId","getData","parseInt","identifier","borderTopColor","color","String","effectAllowed","onDragEnd","dropEffect","onDragLeave","currentTarget","contains","relatedTarget","draggedColumnId","draggedId","Number","isNaN","TaskCard","columns","onReorderColumns","getTasksForColumn","filter","_task$column","status","TaskColumn","selectedProject","showColumnActionsMenu","setShowColumnActionsMenu","setShowCreateColumn","setShowSelectColumnToEditModal","setShowSelectColumnToDeleteModal","setShowDeleteProjectModal","setShowCreateTask","setShowDescriptionModal","handleAssignAllTasks","isManager","canDeleteColumns","canDeleteProject","canCreateTasks","canAssignTasks","sidebarOpen","setSidebarOpen","projects","setSelectedProject","setShowCreateProject","isCreator","_Fragment","project","taskCount","src","require","alt","onClose","onCreateProject","formData","setFormData","errors","setErrors","handleChange","value","target","prev","_objectSpread","onSubmit","trim","htmlFor","type","onChange","placeholder","maxLength","required","rows","onConfirm","onCreateColumn","onUserUpdated","users","setUsers","loading","setLoading","error","setError","successMessage","setSuccessMessage","setCurrentUserRole","showAddUser","setShowAddUser","email","setEmail","role","setRole","availableUsers","setAvailableUsers","showSuggestions","setShowSuggestions","useEffect","_project$users","currentUser","JSON","parse","localStorage","getItem","currentUserInProject","find","u","fetchAvailableUsers","async","data","dashboardServices","getUsers","err","console","isCurrentUser","userId","createdBy","canManageUsers","includes","addUserToProject","user","message","position","toLowerCase","some","selectUser","userEmail","disabled","newRole","updateUserRole","updatedUser","setTimeout","handleRoleChange","removeUserFromProject","handleRemoveUser","showCreateTask","showCreateProject","showCreateColumn","showEditTask","setShowEditTask","showManageUsers","setShowManageUsers","showDeleteProjectModal","selectedTask","setSelectedTask","onCreateTask","onUpdateTask","onDeleteProject","CreateTaskModal","isOpen","onTaskCreated","projectId","CreateProjectModal","CreateColumnModal","TaskModal","onTaskUpdate","mode","ManageUsersModal","DeleteProjectModal","skills","setSkills","selectedSkills","setSelectedSkills","fetchSkills","getSkills","addSkillsToTask","checked","toggleSkill","skillId","category","onSelectColumn","_column$tasks","onUpdateColumn","FormData","get","defaultValue","showAddSkills","setShowAddSkills","showDeleteModal","setShowDeleteModal","showDeleteColumnModal","setShowDeleteColumnModal","showEditColumnModal","setShowEditColumnModal","showSelectColumnToDeleteModal","showSelectColumnToEditModal","showTaskDetailModal","setShowTaskDetailModal","showDescriptionModal","taskToDelete","setTaskToDelete","columnToDelete","setColumnToDelete","columnToEdit","setColumnToEdit","selectedTaskForDetail","setSelectedTaskForDetail","handleUpdateColumn","handleTaskDetailUpdate","fetchProjects","ModalManager","AddSkillsModal","skillIds","EditColumnModal","SelectColumnToDeleteModal","SelectColumnToEditModal","ProjectInfoModal","navigate","useNavigate","handleUpgrade","Dashboard","setTasks","setProjects","setColumns","showUpgradeModal","setShowUpgradeModal","getProjects","fetchTasks","getTasks","fetchColumns","getColumns","handleDeleteTask","deleteTask","_selectedProject$user","handleClickOutside","event","closest","document","addEventListener","removeEventListener","Header","Footer","window","location","reload","ProjectSidebar","KanbanHeader","projectUsers","getProjectUsers","assignAllProjectTasks","canManageProject","KanbanBoard","newStatus","updateTask","response","assignTaskAutomatically","targetColumnId","current","draggedIndex","findIndex","c","targetIndex","dragged","splice","updated","idx","Promise","all","updateColumn","DashboardModals","taskData","createProject","projectData","createColumn","columnData","deleteProject","columnId","col","updatedTasks","Array","isArray","updatedTask","t","UpgradeModal"],"sourceRoot":""}