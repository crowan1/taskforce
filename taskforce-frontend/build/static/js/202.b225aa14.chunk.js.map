{"version":3,"file":"static/js/202.b225aa14.chunk.js","mappings":"oKAAA,MAAMA,EAAe,4BAEfC,EAAUC,eAAOC,GAAuB,IAAlBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnC,MAAMG,EAAQC,aAAaC,QAAQ,SAE7BC,EAAiB,CACnBC,SAAOC,EAAAA,EAAAA,GAAA,CACH,cAAgB,UAADC,OAAYN,GAC3B,eAAgB,oBACbJ,EAAQQ,UAIbG,QAAiBC,MAAMb,GAAGU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOF,GAAmBP,IAE1D,IAAKW,EAASE,GAAI,CACd,MAAMC,QAAkBH,EAASI,OAAOC,OAAM,MAAS,KACvDC,QAAQC,MAAM,aAAc,CACxBnB,MACAoB,OAAQR,EAASQ,OACjBL,YACAM,KAAMpB,EAAQoB,OAGlB,MAAMF,EAAQ,IAAIG,MAAMP,EAAUQ,SAAWR,EAAUI,OAAK,uBAAAR,OAA2BC,EAASQ,SAGhG,MAFAD,EAAMC,OAASR,EAASQ,OACxBD,EAAMJ,UAAYA,EACZI,CACV,CAEA,OAAOP,EAASI,MACpB,EAEaQ,EAAoB,CAC7BC,YAAa1B,SACFD,EAAQ,GAADa,OAAId,EAAY,cAGlC6B,cAAe3B,SACJD,EAAQ,GAADa,OAAId,EAAY,aAAa,CACvC8B,OAAQ,OACRN,KAAMO,KAAKC,UAAUC,KAI7BC,cAAehC,MAAOiC,EAAWF,IACtBhC,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,GAAa,CACpDL,OAAQ,MACRN,KAAMO,KAAKC,UAAUC,KAI7BG,cAAelC,SACJD,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,GAAa,CACpDL,OAAQ,WAIhBO,iBAAkBnC,eAAOiC,EAAWG,GAA4B,IAArBC,EAAIlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAC9C,OAAOJ,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,aAAa,CAC7DL,OAAQ,OACRN,KAAMO,KAAKC,UAAU,CAAEM,QAAOC,UAEtC,EAEAC,eAAgBtC,MAAOiC,EAAWM,EAAQF,IAC/BtC,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,qBAAqB,CACrEL,OAAQ,MACRN,KAAMO,KAAKC,UAAU,CAAES,SAAQF,WAIvCG,sBAAuBxC,MAAOiC,EAAWM,IAC9BxC,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,gBAAgB,CAChEL,OAAQ,SACRN,KAAMO,KAAKC,UAAU,CAAES,aAK/BE,SAAUzC,UACN,MAAMC,EAAMgC,EAAS,GAAArB,OACZd,EAAY,qBAAAc,OAAoBqB,GAAS,GAAArB,OACzCd,EAAY,UACrB,OAAOC,EAAQE,IAGnByC,WAAY1C,SACDD,EAAQ,GAADa,OAAId,EAAY,UAAU,CACpC8B,OAAQ,OACRN,KAAMO,KAAKC,UAAUa,KAI7BC,WAAY5C,MAAO6C,EAAQF,IAChB5C,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAUiC,GAAU,CAC9CjB,OAAQ,MACRN,KAAMO,KAAKC,UAAUa,KAI7BG,WAAY9C,SACDD,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAUiC,GAAU,CAC9CjB,OAAQ,WAIhBmB,gBAAiB/C,MAAO6C,EAAQG,KAC5B,MAAM1C,EAAQC,aAAaC,QAAQ,SAC7ByC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,GAEzB,MAAMnC,QAAiBC,MAAM,GAADF,OAAId,EAAY,WAAAc,OAAUiC,EAAM,iBAAiB,CACzEjB,OAAQ,OACRlB,QAAS,CACL,cAAgB,UAADE,OAAYN,IAE/BgB,KAAM2B,IAGV,IAAKpC,EAASE,GAAI,CACd,MAAMC,QAAkBH,EAASI,OAAOC,OAAM,MAAS,KACvD,MAAM,IAAIK,MAAMP,EAAUQ,SAAO,uBAAAZ,OAA2BC,EAASQ,QACzE,CAEA,OAAOR,EAASI,QAGpBmC,gBAAiBpD,MAAO6C,EAAQQ,IACrBtD,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAUiC,EAAM,iBAAiB,CAC3DjB,OAAQ,SACRN,KAAMO,KAAKC,UAAU,CAAEuB,gBAI/BC,gBAAiBtD,MAAO6C,EAAQU,IACrBxD,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAUiC,EAAM,eAAe,CACzDjB,OAAQ,OACRN,KAAMO,KAAKC,UAAU,CAAEyB,eAI/BC,wBAAyBxD,SACdD,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAUiC,EAAM,WAAW,CACrDjB,OAAQ,SAIhB6B,sBAAuBzD,SACZD,EAAQ,GAADa,OAAId,EAAY,mBAAAc,OAAkBqB,EAAS,eAAe,CACpEL,OAAQ,SAIhB8B,mBAAoB1D,SACTD,EAAQ,GAADa,OAAId,EAAY,mBAAAc,OAAkBqB,EAAS,cAI7D0B,WAAY3D,SACDD,EAAQ,GAADa,OAAId,EAAY,uBAAAc,OAAsBqB,IAGxD2B,aAAc5D,SACHD,EAAQ,GAADa,OAAId,EAAY,YAAY,CACtC8B,OAAQ,OACRN,KAAMO,KAAKC,UAAU+B,KAI7BC,aAAc9D,MAAO+D,EAAUF,IACpB9D,EAAQ,GAADa,OAAId,EAAY,aAAAc,OAAYmD,GAAY,CAClDnC,OAAQ,MACRN,KAAMO,KAAKC,UAAU+B,KAI7BG,aAAchE,SACHD,EAAQ,GAADa,OAAId,EAAY,aAAAc,OAAYmD,GAAY,CAClDnC,OAAQ,WAKhBqC,UAAWjE,SACAD,EAAQ,GAADa,OAAId,EAAY,YAGlCoE,YAAalE,SACFD,EAAQ,GAADa,OAAId,EAAY,WAAW,CACrC8B,OAAQ,OACRN,KAAMO,KAAKC,UAAUqC,KAI7BC,YAAapE,MAAOqE,EAASF,IAClBpE,EAAQ,GAADa,OAAId,EAAY,YAAAc,OAAWyD,GAAW,CAChDzC,OAAQ,MACRN,KAAMO,KAAKC,UAAUqC,KAI7BG,YAAatE,SACFD,EAAQ,GAADa,OAAId,EAAY,YAAAc,OAAWyD,GAAW,CAChDzC,OAAQ,WAKhB2C,SAAUvE,SACCD,EAAQ,GAADa,OAAId,EAAY,WAGlC0E,YAAaxE,SACFD,EAAQ,GAADa,OAAId,EAAY,WAGlC2E,gBAAiBzE,SACND,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,WAGxDyC,WAAY1E,SACDD,EAAQ,GAADa,OAAId,EAAY,UAIlC6E,cAAe3E,SACJD,EAAQ,GAADa,OAAId,EAAY,iBAGlC8E,sBAAuB5E,SACZD,EAAQ,GAADa,OAAId,EAAY,WAAAc,OAAU2B,EAAM,YAGlDsC,aAAc7E,SACHD,EAAQ,GAADa,OAAId,EAAY,gBAAgB,CAC1C8B,OAAQ,OACRN,KAAMO,KAAKC,UAAUqC,KAI7BW,gBAAiB9E,MAAO+E,EAAaZ,IAC1BpE,EAAQ,GAADa,OAAId,EAAY,iBAAAc,OAAgBmE,GAAe,CACzDnD,OAAQ,MACRN,KAAMO,KAAKC,UAAUqC,KAI7Ba,gBAAiBhF,SACND,EAAQ,GAADa,OAAId,EAAY,uBAAAc,OAAsByD,GAAW,CAC3DzC,OAAQ,WAIhBqD,qBAAsBjF,SACXD,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,kBAGxDiD,6BAA8BlF,SACnBD,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,sBAGxDkD,mBAAoBnF,MAAOiC,EAAWkC,IAC3BpE,EAAQ,GAADa,OAAId,EAAY,cAAAc,OAAaqB,EAAS,WAAW,CAC3DL,OAAQ,OACRN,KAAMO,KAAKC,UAAUqC,KAI7BiB,mBAAoBpF,SACTD,EAAQ,GAADa,OAAId,EAAY,qBAAAc,OAAoByD,GAAW,CACzDzC,OAAQ,W","sources":["services/dashboard/dashboardServices.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nconst apiCall = async (url, options = {}) => {\n    const token = localStorage.getItem('token');\n    \n    const defaultOptions = {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    };\n\n    const response = await fetch(url, { ...defaultOptions, ...options });\n    \n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n            url,\n            status: response.status,\n            errorData,\n            body: options.body\n        });\n        \n        const error = new Error(errorData.message || errorData.error || `HTTP error! status: ${response.status}`);\n        error.status = response.status;\n        error.errorData = errorData;\n        throw error;\n    }\n    \n    return response.json();\n};\n\nexport const dashboardServices = {\n    getProjects: async () => {\n        return apiCall(`${API_BASE_URL}/projects`);\n    },\n\n    createProject: async (projectData) => {\n        return apiCall(`${API_BASE_URL}/projects`, {\n            method: 'POST',\n            body: JSON.stringify(projectData)\n        });\n    },\n\n    updateProject: async (projectId, projectData) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}`, {\n            method: 'PUT',\n            body: JSON.stringify(projectData)\n        });\n    },\n\n    deleteProject: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    addUserToProject: async (projectId, email, role = 'member') => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/add-user`, {\n            method: 'POST',\n            body: JSON.stringify({ email, role })\n        });\n    },\n\n    updateUserRole: async (projectId, userId, role) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/update-user-role`, {\n            method: 'PUT',\n            body: JSON.stringify({ userId, role })\n        });\n    },\n\n    removeUserFromProject: async (projectId, userId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/remove-user`, {\n            method: 'DELETE',\n            body: JSON.stringify({ userId })\n        });\n    },\n\n    // =tâches\n    getTasks: async (projectId) => {\n        const url = projectId \n            ? `${API_BASE_URL}/tasks?projectId=${projectId}`\n            : `${API_BASE_URL}/tasks`;\n        return apiCall(url);\n    },\n\n    createTask: async (taskData) => {\n        return apiCall(`${API_BASE_URL}/tasks`, {\n            method: 'POST',\n            body: JSON.stringify(taskData)\n        });\n    },\n\n    updateTask: async (taskId, taskData) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}`, {\n            method: 'PUT',\n            body: JSON.stringify(taskData)\n        });\n    },\n\n    deleteTask: async (taskId) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    uploadTaskImage: async (taskId, imageFile) => {\n        const token = localStorage.getItem('token');\n        const formData = new FormData();\n        formData.append('image', imageFile);\n\n        const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/upload-image`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            },\n            body: formData\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n\n        return response.json();\n    },\n\n    deleteTaskImage: async (taskId, imagePath) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/delete-image`, {\n            method: 'DELETE',\n            body: JSON.stringify({ imagePath })\n        });\n    },\n\n    addSkillsToTask: async (taskId, skillIds) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/add-skills`, {\n            method: 'POST',\n            body: JSON.stringify({ skillIds })\n        });\n    },\n\n    assignTaskAutomatically: async (taskId) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/assign`, {\n            method: 'POST'\n        });\n    },\n\n    assignAllProjectTasks: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/tasks/project/${projectId}/assign-all`, {\n            method: 'POST'\n        });\n    },\n\n    getProjectWorkload: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/tasks/project/${projectId}/workload`);\n    },\n\n    // COlonnes\n    getColumns: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/columns?projectId=${projectId}`);\n    },\n\n    createColumn: async (columnData) => {\n        return apiCall(`${API_BASE_URL}/columns`, {\n            method: 'POST',\n            body: JSON.stringify(columnData)\n        });\n    },\n\n    updateColumn: async (columnId, columnData) => {\n        return apiCall(`${API_BASE_URL}/columns/${columnId}`, {\n            method: 'PUT',\n            body: JSON.stringify(columnData)\n        });\n    },\n\n    deleteColumn: async (columnId) => {\n        return apiCall(`${API_BASE_URL}/columns/${columnId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    // compétences\n    getSkills: async () => {\n        return apiCall(`${API_BASE_URL}/skills`);\n    },\n\n    createSkill: async (skillData) => {\n        return apiCall(`${API_BASE_URL}/skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    updateSkill: async (skillId, skillData) => {\n        return apiCall(`${API_BASE_URL}/skills/${skillId}`, {\n            method: 'PUT',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/skills/${skillId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    // utilisateurs\n    getUsers: async () => {\n        return apiCall(`${API_BASE_URL}/users`);\n    },\n\n    getAllUsers: async () => {\n        return apiCall(`${API_BASE_URL}/users`);\n    },\n\n    getProjectUsers: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/users`);\n    },\n\n    getProfile: async () => {\n        return apiCall(`${API_BASE_URL}/user`);\n    },\n\n    // compétences utilisateur\n    getUserSkills: async () => {\n        return apiCall(`${API_BASE_URL}/user-skills`);\n    },\n\n    getUserSkillsByUserId: async (userId) => {\n        return apiCall(`${API_BASE_URL}/users/${userId}/skills`);\n    },\n\n    addUserSkill: async (skillData) => {\n        return apiCall(`${API_BASE_URL}/user-skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    updateUserSkill: async (userSkillId, skillData) => {\n        return apiCall(`${API_BASE_URL}/user-skills/${userSkillId}`, {\n            method: 'PUT',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteUserSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/user-skills/skill/${skillId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    getProjectUserSkills: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills/users`);\n    },\n\n    getAllAvailableProjectSkills: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills/available`);\n    },\n\n    createProjectSkill: async (projectId, skillData) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteProjectSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/projects/skills/${skillId}`, {\n            method: 'DELETE'\n        });\n    }\n};\n"],"names":["API_BASE_URL","apiCall","async","url","options","arguments","length","undefined","token","localStorage","getItem","defaultOptions","headers","_objectSpread","concat","response","fetch","ok","errorData","json","catch","console","error","status","body","Error","message","dashboardServices","getProjects","createProject","method","JSON","stringify","projectData","updateProject","projectId","deleteProject","addUserToProject","email","role","updateUserRole","userId","removeUserFromProject","getTasks","createTask","taskData","updateTask","taskId","deleteTask","uploadTaskImage","imageFile","formData","FormData","append","deleteTaskImage","imagePath","addSkillsToTask","skillIds","assignTaskAutomatically","assignAllProjectTasks","getProjectWorkload","getColumns","createColumn","columnData","updateColumn","columnId","deleteColumn","getSkills","createSkill","skillData","updateSkill","skillId","deleteSkill","getUsers","getAllUsers","getProjectUsers","getProfile","getUserSkills","getUserSkillsByUserId","addUserSkill","updateUserSkill","userSkillId","deleteUserSkill","getProjectUserSkills","getAllAvailableProjectSkills","createProjectSkill","deleteProjectSkill"],"sourceRoot":""}