{"version":3,"file":"static/js/156.22c8b94c.chunk.js","mappings":"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","sources":["services/dashboard/dashboardServices.js","compenents/myAccount/CancelPremiumModal.jsx","compenents/myAccount/ProfileInfo.jsx","compenents/myAccount/UserSkillsManager.jsx","compenents/myAccount/UserTasksManager.jsx","pages/MyAccount.jsx"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nconst apiCall = async (url, options = {}) => {\n    const token = localStorage.getItem('token');\n    \n    const defaultOptions = {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    };\n\n    const response = await fetch(url, { ...defaultOptions, ...options });\n    \n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n            url,\n            status: response.status,\n            errorData,\n            body: options.body\n        });\n        \n        const error = new Error(errorData.message || errorData.error || `HTTP error! status: ${response.status}`);\n        error.status = response.status;\n        error.errorData = errorData;\n        throw error;\n    }\n    \n    return response.json();\n};\n\nexport const dashboardServices = {\n    getProjects: async () => {\n        return apiCall(`${API_BASE_URL}/projects`);\n    },\n\n    createProject: async (projectData) => {\n        return apiCall(`${API_BASE_URL}/projects`, {\n            method: 'POST',\n            body: JSON.stringify(projectData)\n        });\n    },\n\n    updateProject: async (projectId, projectData) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}`, {\n            method: 'PUT',\n            body: JSON.stringify(projectData)\n        });\n    },\n\n    deleteProject: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    addUserToProject: async (projectId, email, role = 'member') => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/add-user`, {\n            method: 'POST',\n            body: JSON.stringify({ email, role })\n        });\n    },\n\n    updateUserRole: async (projectId, userId, role) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/update-user-role`, {\n            method: 'PUT',\n            body: JSON.stringify({ userId, role })\n        });\n    },\n\n    removeUserFromProject: async (projectId, userId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/remove-user`, {\n            method: 'DELETE',\n            body: JSON.stringify({ userId })\n        });\n    },\n\n    // =tâches\n    getTasks: async (projectId) => {\n        const url = projectId \n            ? `${API_BASE_URL}/tasks?projectId=${projectId}`\n            : `${API_BASE_URL}/tasks`;\n        return apiCall(url);\n    },\n\n    createTask: async (taskData) => {\n        return apiCall(`${API_BASE_URL}/tasks`, {\n            method: 'POST',\n            body: JSON.stringify(taskData)\n        });\n    },\n\n    updateTask: async (taskId, taskData) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}`, {\n            method: 'PUT',\n            body: JSON.stringify(taskData)\n        });\n    },\n\n    deleteTask: async (taskId) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    uploadTaskImage: async (taskId, imageFile) => {\n        const token = localStorage.getItem('token');\n        const formData = new FormData();\n        formData.append('image', imageFile);\n\n        const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/upload-image`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            },\n            body: formData\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n\n        return response.json();\n    },\n\n    deleteTaskImage: async (taskId, imagePath) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/delete-image`, {\n            method: 'DELETE',\n            body: JSON.stringify({ imagePath })\n        });\n    },\n\n    addSkillsToTask: async (taskId, skillIds) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/add-skills`, {\n            method: 'POST',\n            body: JSON.stringify({ skillIds })\n        });\n    },\n\n    assignTaskAutomatically: async (taskId) => {\n        return apiCall(`${API_BASE_URL}/tasks/${taskId}/assign`, {\n            method: 'POST'\n        });\n    },\n\n    assignAllProjectTasks: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/tasks/project/${projectId}/assign-all`, {\n            method: 'POST'\n        });\n    },\n\n    getProjectWorkload: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/tasks/project/${projectId}/workload`);\n    },\n\n    // COlonnes\n    getColumns: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/columns?projectId=${projectId}`);\n    },\n\n    createColumn: async (columnData) => {\n        return apiCall(`${API_BASE_URL}/columns`, {\n            method: 'POST',\n            body: JSON.stringify(columnData)\n        });\n    },\n\n    updateColumn: async (columnId, columnData) => {\n        return apiCall(`${API_BASE_URL}/columns/${columnId}`, {\n            method: 'PUT',\n            body: JSON.stringify(columnData)\n        });\n    },\n\n    deleteColumn: async (columnId) => {\n        return apiCall(`${API_BASE_URL}/columns/${columnId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    // compétences\n    getSkills: async () => {\n        return apiCall(`${API_BASE_URL}/skills`);\n    },\n\n    createSkill: async (skillData) => {\n        return apiCall(`${API_BASE_URL}/skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    updateSkill: async (skillId, skillData) => {\n        return apiCall(`${API_BASE_URL}/skills/${skillId}`, {\n            method: 'PUT',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/skills/${skillId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    // utilisateurs\n    getUsers: async () => {\n        return apiCall(`${API_BASE_URL}/users`);\n    },\n\n    getAllUsers: async () => {\n        return apiCall(`${API_BASE_URL}/users`);\n    },\n\n    getProjectUsers: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/users`);\n    },\n\n    getProfile: async () => {\n        return apiCall(`${API_BASE_URL}/user`);\n    },\n\n    // compétences utilisateur\n    getUserSkills: async () => {\n        return apiCall(`${API_BASE_URL}/user-skills`);\n    },\n\n    getUserSkillsByUserId: async (userId) => {\n        return apiCall(`${API_BASE_URL}/users/${userId}/skills`);\n    },\n\n    addUserSkill: async (skillData) => {\n        return apiCall(`${API_BASE_URL}/user-skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    updateUserSkill: async (userSkillId, skillData) => {\n        return apiCall(`${API_BASE_URL}/user-skills/${userSkillId}`, {\n            method: 'PUT',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteUserSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/user-skills/skill/${skillId}`, {\n            method: 'DELETE'\n        });\n    },\n\n    getProjectUserSkills: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills/users`);\n    },\n\n    getAllAvailableProjectSkills: async (projectId) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills/available`);\n    },\n\n    createProjectSkill: async (projectId, skillData) => {\n        return apiCall(`${API_BASE_URL}/projects/${projectId}/skills`, {\n            method: 'POST',\n            body: JSON.stringify(skillData)\n        });\n    },\n\n    deleteProjectSkill: async (skillId) => {\n        return apiCall(`${API_BASE_URL}/projects/skills/${skillId}`, {\n            method: 'DELETE'\n        });\n    }\n};\n","import React from 'react';\nimport '../../assets/styles/compenents/MyAccount/MyAccount.scss';\n\nconst CancelPremiumModal = ({ isOpen, onClose, onConfirm }) => {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\" onClick={onClose}>\n            <div className=\"cancel-premium-modal\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"modal-header\">\n                    <h3>Annuler l'abonnement Premium</h3>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n                \n                <div className=\"modal-body\">\n                    <p>Êtes-vous sûr de vouloir arrêter votre abonnement Premium ?</p>\n                    <p className=\"warning-text\">Vous perdrez l'accès aux fonctionnalités Premium.</p>\n                </div>\n                \n                <div className=\"modal-actions\">\n                    <button className=\"btn-cancel\" onClick={onClose}>\n                        Annuler\n                    </button>\n                    <button className=\"btn-confirm\" onClick={onConfirm}>\n                        Oui, arrêter Premium\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CancelPremiumModal;\n","import React, { useState } from 'react';\nimport '../../assets/styles/compenents/MyAccount/MyAccount.scss';\nimport profileService from '../../services/profil/profileService';\nimport stripeService from '../../services/stripeService';\nimport CancelPremiumModal from './CancelPremiumModal';\n\nconst ProfileInfo = ({ user, onUpdate, subscriptionStatus }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [showCancelModal, setShowCancelModal] = useState(false);\n    const [editForm, setEditForm] = useState({\n        email: user?.email || '',\n        firstname: user?.firstname || '',\n        lastname: user?.lastname || ''\n    });\n\n    const handleEdit = () => {\n        setIsEditing(true);\n        setEditForm({\n            email: user?.email || '',\n            firstname: user?.firstname || '',\n            lastname: user?.lastname || ''\n        });\n    };\n\n    const handleCancel = () => {\n        setIsEditing(false);\n        setEditForm({\n            email: user?.email || '',\n            firstname: user?.firstname || '',\n            lastname: user?.lastname || ''\n        });\n    };\n\n    const handleSave = async () => {\n        try {\n            const updatedUser = await profileService.updateProfile(editForm);\n            onUpdate(updatedUser);\n            setIsEditing(false);\n            setShowSuccessMessage(true);\n            setTimeout(() => setShowSuccessMessage(false), 3000);\n        } catch (err) {\n            console.error('Erreur lors de la mise à jour du profil:', err);\n        }\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setEditForm(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\n    const handleCancelSubscription = async () => {\n        try {\n            const result = await stripeService.cancelSubscription();\n            \n            if (result.success) {\n                setShowCancelModal(false); \n                window.location.reload();\n            } else {\n                alert('Erreur lors de l\\'annulation de l\\'abonnement');\n            }\n        } catch (error) {\n            console.error('Erreur lors de l\\'annulation:', error);\n            alert('Erreur lors de l\\'annulation de l\\'abonnement: ' + error.message);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"profile-card\">\n                {showSuccessMessage && (\n                    <div className=\"success-message\">\n                        ✅ Modifications enregistrées avec succès !\n                    </div>\n                )}\n                <div className=\"profile-avatar\">\n                    <div className=\"avatar-placeholder\">\n                        {user?.firstname?.charAt(0)?.toUpperCase() || user?.email?.charAt(0)?.toUpperCase() || 'U'}\n                    </div>\n                    {subscriptionStatus?.is_premium && (\n                        <div className=\"premium-badge\">\n                            PREMIUM\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"profile-info\">\n                    {!isEditing ? (\n                        <div className=\"info-display\">\n                            <div className=\"info-group\">\n                                <label>Prénom</label>\n                                <p>{user?.firstname ?? (editForm.firstname || 'Non renseigné')}</p>\n                            </div>\n                            <div className=\"info-group\">\n                                <label>Nom</label>\n                                <p>{user?.lastname ?? (editForm.lastname || 'Non renseigné')}</p>\n                            </div>\n                            <div className=\"info-group\">\n                                <label>Email</label>\n                                <p>{user?.email ?? (editForm.email || 'Non renseigné')}</p>\n                            </div>\n                            <div className=\"info-group\">\n                                <label>Membre depuis</label>\n                                <p>{user?.createdAt ? new Date(user.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}</p>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"info-edit\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"firstname\">Prénom</label>\n                                <input\n                                    type=\"text\"\n                                    id=\"firstname\"\n                                    name=\"firstname\"\n                                    value={editForm.firstname}\n                                    onChange={handleInputChange}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"lastname\">Nom</label>\n                                <input\n                                    type=\"text\"\n                                    id=\"lastname\"\n                                    name=\"lastname\"\n                                    value={editForm.lastname}\n                                    onChange={handleInputChange}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">Email</label>\n                                <input\n                                    type=\"email\"\n                                    id=\"email\"\n                                    name=\"email\"\n                                    value={editForm.email}\n                                    onChange={handleInputChange}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"profile-actions\">\n                    {!isEditing ? (\n                        <>\n                            <button className=\"btn-edit\" onClick={handleEdit}>\n                                Modifier le profil\n                            </button>\n                            {!subscriptionStatus?.is_premium ? (\n                                <button \n                                    className=\"btn-premium\" \n                                    onClick={() => window.location.href = '/upgrade'}\n                                >\n                                    Devenir Premium\n                                </button>\n                            ) : (\n                                <button \n                                    className=\"btn-cancel-premium\" \n                                    onClick={() => setShowCancelModal(true)}\n                                >\n                                    Arrêter d'être Premium\n                                </button>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            <button className=\"btn-save\" onClick={handleSave}>\n                                Enregistrer\n                            </button>\n                            <button className=\"btn-cancel\" onClick={handleCancel}>\n                                Annuler\n                            </button>\n                        </>\n                    )}\n                </div>\n            </div>\n\n            <CancelPremiumModal\n                isOpen={showCancelModal}\n                onClose={() => setShowCancelModal(false)}\n                onConfirm={handleCancelSubscription}\n            />\n        </>\n    );\n};\n\nexport default ProfileInfo;\n","import React, { useState, useEffect } from 'react';\nimport { dashboardServices } from '../../services/dashboard/dashboardServices';\nimport '../../assets/styles/compenents/MyAccount/UserSkillsManager.scss';\n\nconst UserSkillsManager = () => {\n    const [userSkills, setUserSkills] = useState([]);\n\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [showAddSkill, setShowAddSkill] = useState(false);\n    const [newSkill, setNewSkill] = useState({ name: '', description: '' });\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const fetchData = async () => {\n        try {\n            setLoading(true);\n            const userSkillsData = await dashboardServices.getUserSkills();\n            setUserSkills(userSkillsData.skills || []);\n        } catch (err) {\n            setError('Erreur lors du chargement des compétences');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAddSkill = async (e) => {\n        e.preventDefault();\n        if (!newSkill.name) return;\n\n        try {\n            const response = await dashboardServices.addUserSkill(newSkill);\n            setUserSkills(prev => [...prev, response.userSkill]);\n            setNewSkill({ name: '', description: '' });\n            setShowAddSkill(false);\n        } catch (err) {\n            setError('Erreur lors de la création de la compétence');\n        }\n    };\n\n    const handleDeleteSkill = async (skillId) => {\n        if (!window.confirm('voulez vous supprimer cette compétence ?')) {\n            return;\n        }\n\n        try {\n            await dashboardServices.deleteUserSkill(skillId);\n            setUserSkills(prev => prev.filter(skill => skill.id !== skillId));\n        } catch (err) {\n            setError('Erreur lors de la suppression de la compétence');\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"user-skills-manager\">\n                <div className=\"loading-spinner\"></div>\n                <p>Chargement des compétences...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"user-skills-manager\">\n            <div className=\"skills-header\">\n                <h3>Mes Compétences</h3>\n                <button \n                    className=\"btn-add-skill\"\n                    onClick={() => setShowAddSkill(true)}\n                >\n                    + Créer une compétence\n                </button>\n            </div>\n\n            {error && (\n                <div className=\"error-message\">\n                    {error}\n                    <button onClick={() => setError(null)}>×</button>\n                </div>\n            )}\n\n            {showAddSkill && (\n                <div className=\"add-skill-modal\">\n                    <div className=\"modal-content\">\n                        <h4>Créer une nouvelle compétence</h4>\n                        <form onSubmit={handleAddSkill}>\n                            <div className=\"form-group\">\n                                <label>Nom de la compétence</label>\n                                <input \n                                    type=\"text\"\n                                    value={newSkill.name}\n                                    onChange={(e) => setNewSkill(prev => ({ ...prev, name: e.target.value }))}\n                                    placeholder=\"Ex: Développement React, Design UI/UX, API REST...\"\n                                    required\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description (optionnel)</label>\n                                <textarea \n                                    value={newSkill.description}\n                                    onChange={(e) => setNewSkill(prev => ({ ...prev, description: e.target.value }))}\n                                    placeholder=\"Décrivez votre expérience dans ce domaine...\"\n                                    rows=\"3\"\n                                />\n                            </div>\n\n                            <div className=\"modal-actions\">\n                                <button type=\"submit\" className=\"btn-primary\">\n                                    Ajouter\n                                </button>\n                                <button \n                                    type=\"button\" \n                                    className=\"btn-secondary\"\n                                    onClick={() => setShowAddSkill(false)}\n                                >\n                                    Annuler\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )}\n\n            <div className=\"skills-list\">\n                {userSkills.length === 0 ? (\n                    <div className=\"no-skills\">\n                        <p>Aucune compétence ajoutée</p>\n                        <p>Ajoutez vos compétences pour permettre l'assignation automatique des tâches</p>\n                    </div>\n                ) : (\n                    userSkills.map(userSkill => (\n                        <div key={userSkill.id} className=\"skill-item\">\n                            <div className=\"skill-info\">\n                                <h4>{userSkill.name}</h4>\n                                <p>{userSkill.description}</p>\n                            </div>\n\n                            <button \n                                className=\"btn-delete-skill\"\n                                onClick={() => handleDeleteSkill(userSkill.id)}\n                                title=\"Supprimer cette compétence\"\n                            >\n                                ×\n                            </button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            {userSkills.length > 0 && (\n                <div className=\"skills-info\">\n                    <p>\n                        <strong>Note :</strong> Vos compétences sont utilisées pour l'assignation automatique des tâches. \n                        Plus vos compétences correspondent aux exigences d'une tâche, plus vous avez de chances d'être assigné.\n                    </p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default UserSkillsManager;\n","import React, { useState, useEffect } from 'react';\nimport { dashboardServices } from '../../services/dashboard/dashboardServices';\nimport '../../assets/styles/compenents/MyAccount/UserTasksManager.scss';\n\nconst UserTasksManager = () => {\n    const [assignedTasks, setAssignedTasks] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [expandedProjects, setExpandedProjects] = useState({});\n\n    useEffect(() => {\n        fetchAssignedTasks();\n    }, []);\n\n    const fetchAssignedTasks = async () => {\n        try {\n            setLoading(true);\n            const response = await dashboardServices.getTasks();\n            const tasks = response.tasks || [];\n            const assigned = tasks.filter(task => task.assignedTo);\n            setAssignedTasks(assigned);\n            \n            if (assigned.length > 0) {\n                const firstProjectId = assigned[0].project?.id;\n                if (firstProjectId) {\n                    setExpandedProjects({ [firstProjectId]: true });\n                }\n            }\n        } catch (err) {\n            setError('Erreur lors du chargement des tâches assignées');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const toggleProject = (projectId) => {\n        setExpandedProjects(prev => ({\n            ...prev,\n            [projectId]: !prev[projectId]\n        }));\n    };\n\n    const groupTasksByProject = () => {\n        const grouped = {};\n        assignedTasks.forEach(task => {\n            const projectId = task.project?.id || 'unknown';\n            const projectName = task.project?.name || 'Projet inconnu';\n            \n            if (!grouped[projectId]) {\n                grouped[projectId] = {\n                    name: projectName,\n                    tasks: []\n                };\n            }\n            grouped[projectId].tasks.push(task);\n        });\n        return grouped;\n    };\n\n    const getPriorityColor = (priority) => {\n        switch (priority) {\n            case 'high': return '#dc3545';\n            case 'medium': return '#ffc107';\n            case 'low': return '#28a745';\n            default: return '#6c757d';\n        }\n    };\n\n    const getPriorityLabel = (priority) => {\n        switch (priority) {\n            case 'high': return 'Haute';\n            case 'medium': return 'Moyenne';\n            case 'low': return 'Basse';\n            default: return 'Non définie';\n        }\n    };\n\n    const getStatusColor = (status) => {\n        switch (status) {\n            case 'todo': return '#6c757d';\n            case 'en-cours': return '#007bff';\n            case 'done': return '#28a745';\n            default: return '#6c757d';\n        }\n    };\n\n    const getStatusLabel = (status) => {\n        switch (status) {\n            case 'todo': return 'À faire';\n            case 'en-cours': return 'En cours';\n            case 'done': return 'Terminée';\n            default: return 'Non définie';\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"user-tasks-manager\">\n                <div className=\"loading-spinner\"></div>\n                <p>Chargement des tâches assignées...</p>\n            </div>\n        );\n    }\n\n    const groupedTasks = groupTasksByProject();\n    const totalTasks = assignedTasks.length;\n\n    return (\n        <div className=\"user-tasks-manager\">\n            <div className=\"tasks-header\">\n                <h3>Mes Tâches Assignées</h3>\n                <span className=\"task-count\">{totalTasks} tâche(s)</span>\n            </div>\n\n            {error && (\n                <div className=\"error-message\">\n                    {error}\n                    <button onClick={() => setError(null)}>×</button>\n                </div>\n            )}\n\n            {assignedTasks.length === 0 ? (\n                <div className=\"no-tasks\">\n                    <p>Aucune tâche ne vous a été assignée pour le moment.</p>\n                    <p>Les tâches vous seront automatiquement attribuées</p>\n                    <p>Ca va arriver bientôt !!! </p>\n                </div>\n            ) : (\n                <div className=\"projects-list\">\n                    {Object.entries(groupedTasks).map(([projectId, project]) => (\n                        <div key={projectId} className=\"project-group\">\n                            <div \n                                className=\"project-header\"\n                                onClick={() => toggleProject(projectId)}\n                            >\n                                <div className=\"project-info\">\n                                    <h4 className=\"project-name\">{project.name}</h4>\n                                    <span className=\"project-task-count\">\n                                        {project.tasks.length} tâche(s)\n                                    </span>\n                                </div>\n                                <div className=\"project-toggle\">\n                                    <span className={`arrow ${expandedProjects[projectId] ? 'expanded' : ''}`}>\n                                        ▼\n                                    </span>\n                                </div>\n                            </div>\n                            \n                            {expandedProjects[projectId] && (\n                                <div className=\"project-tasks\">\n                                    {project.tasks.map(task => (\n                                        <div key={task.id} className=\"task-item\">\n                                            <div className=\"task-header\">\n                                                <h5 className=\"task-title\">{task.title}</h5>\n                                                <div className=\"task-meta\">\n                                                    <span \n                                                        className=\"priority-badge\"\n                                                        style={{ backgroundColor: getPriorityColor(task.priority) }}\n                                                    >\n                                                        {getPriorityLabel(task.priority)}\n                                                    </span>\n                                                    <span \n                                                        className=\"priority-badge\"\n                                                        style={{ backgroundColor: getStatusColor(task.status) }}\n                                                    >\n                                                        {getStatusLabel(task.status)}\n                                                    </span>\n                                                </div>\n                                            </div>\n                                            \n                                            {task.description && (\n                                                <p className=\"task-description\">{task.description}</p>\n                                            )}\n                                            \n                                            <div className=\"task-details\">\n                                                {task.requiredSkills && task.requiredSkills.length > 0 && (\n                                                    <div className=\"task-skills\">\n                                                        <strong>Compétences requises :</strong>\n                                                        <div className=\"skills-list\">\n                                                            {task.requiredSkills.map(skill => (\n                                                                <span key={skill.id} className=\"skill-badge\">\n                                                                    {skill.name}\n                                                                </span>\n                                                            ))}\n                                                        </div>\n                                                    </div>\n                                                )}\n                                                \n                                                <div className=\"task-dates\">\n                                                    <div className=\"date-item\">\n                                                        <strong>Créée le :</strong> {new Date(task.createdAt).toLocaleDateString('fr-FR')}\n                                                    </div>\n                                                    {task.assignedAt && (\n                                                        <div className=\"date-item\">\n                                                            <strong>Assignée le :</strong> {new Date(task.assignedAt).toLocaleDateString('fr-FR')}\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default UserTasksManager;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from \"../compenents/includes/header\";\nimport Footer from \"../compenents/includes/footer\";\nimport ProfileInfo from \"../compenents/myAccount/ProfileInfo\";\nimport UserSkillsManager from \"../compenents/myAccount/UserSkillsManager\";\nimport UserTasksManager from \"../compenents/myAccount/UserTasksManager\";\nimport profileService from '../services/profil/profileService';\nimport authService from '../services/authServices';\nimport stripeService from '../services/stripeService';\nimport '../assets/styles/compenents/MyAccount/MyAccount.scss';\n\nconst MyAccount = () => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [subscriptionStatus, setSubscriptionStatus] = useState(null);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                setLoading(true);\n                const userData = await profileService.getProfile();\n                setUser(userData);\n                 \n                try {\n                    const subscription = await stripeService.getSubscriptionStatus();\n                    setSubscriptionStatus(subscription);\n                } catch (subscriptionError) {\n                    console.error('Error fetching subscription:', subscriptionError);\n                    setSubscriptionStatus({ is_premium: false });\n                }\n            } catch (err) {\n                setError('Erreur lors du chargement du profil');\n                console.error('Error fetching profile:', err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        const checkAuth = async () => {\n            const isAuth = await authService.isAuthenticated();\n            if (isAuth) {\n                await fetchUserProfile();\n            } else {\n                navigate('/login');\n            }\n        };\n        \n        checkAuth();\n    }, [navigate]);\n\n    const handleLogout = () => {\n        authService.logout();\n        navigate('/');\n    };\n\n    const handleProfileUpdate = (updatedUser) => {\n        const normalized = updatedUser?.user ?? updatedUser;\n        setUser((prev) => ({ ...prev, ...normalized }));\n    };\n\n    if (loading) {\n        return (\n            <div className=\"my-account-container\">\n                <Header />\n                <div className=\"loading-container\">\n                    <div className=\"loading-spinner\"></div>\n                    <p>Chargement de votre profil...</p>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"my-account-container\">\n                <Header />\n                <div className=\"error-container\">\n                    <h2>Erreur</h2>\n                    <p>{error}</p>\n                    <button onClick={() => window.location.reload()}>Réessayer</button>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"my-account-container\">\n            <Header />\n            <main className=\"my-account-main\">\n                <div className=\"my-account-content\">\n                    <div className=\"profile-header\">\n                        <h1>Mon Compte</h1>\n                        <p>Gérez vos informations personnelles</p>\n                    </div>\n\n                    <ProfileInfo user={user} onUpdate={handleProfileUpdate} subscriptionStatus={subscriptionStatus} />\n\n                    <UserSkillsManager />\n\n                    <UserTasksManager />\n\n                    <div className=\"account-stats\">\n                        <div className=\"stat-card\">\n                            <h3>Informations du compte</h3>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-label\">Dernière mise à jour</span>\n                                <span className=\"stat-value\">{user?.updatedAt ? new Date(user.updatedAt).toLocaleDateString('fr-FR') : 'Non disponible'}</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-label\">Rôle</span>\n                                <span className=\"stat-value\">{user?.roles?.includes('ROLE_ADMIN') ? 'Administrateur' : 'Utilisateur'}</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-label\">Plan</span>\n                                <span className=\"stat-value\">\n                                    {subscriptionStatus?.is_premium ? 'Premium' : 'Gratuit (2 projets max)'}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"logout-section\">\n                        <button className=\"btn-logout\" onClick={handleLogout}>\n                            Se déconnecter\n                        </button>\n                    </div>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n};\n\nexport default MyAccount;"],"names":["API_BASE_URL","apiCall","async","url","options","arguments","length","undefined","token","localStorage","getItem","defaultOptions","headers","_objectSpread","concat","response","fetch","ok","errorData","json","catch","console","error","status","body","Error","message","dashboardServices","getProjects","createProject","method","JSON","stringify","projectData","updateProject","projectId","deleteProject","addUserToProject","email","role","updateUserRole","userId","removeUserFromProject","getTasks","createTask","taskData","updateTask","taskId","deleteTask","uploadTaskImage","imageFile","formData","FormData","append","deleteTaskImage","imagePath","addSkillsToTask","skillIds","assignTaskAutomatically","assignAllProjectTasks","getProjectWorkload","getColumns","createColumn","columnData","updateColumn","columnId","deleteColumn","getSkills","createSkill","skillData","updateSkill","skillId","deleteSkill","getUsers","getAllUsers","getProjectUsers","getProfile","getUserSkills","getUserSkillsByUserId","addUserSkill","updateUserSkill","userSkillId","deleteUserSkill","getProjectUserSkills","getAllAvailableProjectSkills","createProjectSkill","deleteProjectSkill","_ref","isOpen","onClose","onConfirm","_jsx","className","onClick","children","_jsxs","e","stopPropagation","_user$firstname","_user$firstname$charA","_user$email","_user$email$charAt","_user$firstname2","_user$lastname","_user$email2","user","onUpdate","subscriptionStatus","isEditing","setIsEditing","useState","showSuccessMessage","setShowSuccessMessage","showCancelModal","setShowCancelModal","editForm","setEditForm","firstname","lastname","handleInputChange","name","value","target","prev","_Fragment","charAt","toUpperCase","is_premium","htmlFor","type","id","onChange","createdAt","Date","toLocaleDateString","updatedUser","profileService","updateProfile","setTimeout","err","handleCancel","handleEdit","window","location","href","CancelPremiumModal","stripeService","cancelSubscription","success","reload","alert","UserSkillsManager","userSkills","setUserSkills","loading","setLoading","setError","showAddSkill","setShowAddSkill","newSkill","setNewSkill","description","useEffect","fetchData","userSkillsData","skills","onSubmit","preventDefault","userSkill","placeholder","required","rows","map","confirm","filter","skill","handleDeleteSkill","title","UserTasksManager","assignedTasks","setAssignedTasks","expandedProjects","setExpandedProjects","fetchAssignedTasks","assigned","tasks","task","assignedTo","_assigned$0$project","firstProjectId","project","getPriorityColor","priority","getPriorityLabel","getStatusColor","getStatusLabel","groupedTasks","groupTasksByProject","grouped","forEach","_task$project","_task$project2","projectName","push","totalTasks","Object","entries","toggleProject","style","backgroundColor","requiredSkills","assignedAt","MyAccount","_user$roles","setUser","setSubscriptionStatus","navigate","useNavigate","authService","isAuthenticated","userData","subscription","getSubscriptionStatus","subscriptionError","fetchUserProfile","checkAuth","Header","Footer","ProfileInfo","_updatedUser$user","normalized","updatedAt","roles","includes","handleLogout","logout"],"sourceRoot":""}