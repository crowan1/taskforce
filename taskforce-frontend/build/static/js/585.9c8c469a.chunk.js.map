{"version":3,"file":"static/js/585.9c8c469a.chunk.js","mappings":"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","sources":["compenents/Admin/ProjectSelector.jsx","compenents/Admin/OverviewTab.jsx","compenents/Admin/TasksTab.jsx","compenents/Admin/UserProfileModal.jsx","compenents/Admin/WorkloadBar.jsx","compenents/Admin/UsersTab.jsx","compenents/Admin/AdminTabs.jsx","compenents/Admin/AddUserModal.jsx","compenents/Admin/ReassignTaskModal.jsx","pages/Admin.jsx"],"sourcesContent":["import React from 'react';\n\nconst ProjectSelector = ({ projects, selectedProject, onProjectChange }) => {\n    return (\n        <div className=\"project-selector\">\n            <h2>Sélectionner un projet</h2>\n            <select \n                value={selectedProject?.id || ''} \n                onChange={(e) => onProjectChange(e.target.value ? parseInt(e.target.value) : null)}\n                className=\"project-select\"\n            >\n                <option value=\"\">Choisir un projet...</option>\n                {projects.map(project => (\n                    <option key={project.id} value={project.id}>\n                        {project.name}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default ProjectSelector;\n","import React from 'react';\n\nconst OverviewTab = ({ projectTasks, projectUsers, onCreateTask, onAddUser, onNavigateToDashboard }) => {\n    return (\n        <div className=\"overview-tab\">\n            <div className=\"overview-grid\">\n                <div className=\"overview-card\">\n                    <h3>Chiffres clés du projet </h3>\n                    <div className=\"stats\">\n                        <div className=\"stat-item\">\n                            <span className=\"stat-number\">{projectTasks.length}</span>\n                            <span className=\"stat-label\">Tâches</span>\n                        </div>\n                        <div className=\"stat-item\">\n                            <span className=\"stat-number\">{projectUsers.length}</span>\n                            <span className=\"stat-label\">Utilisateurs</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default OverviewTab;\n","import React, { useState } from 'react';\nimport authService from '../../services/authServices';\nimport '../../assets/styles/compenents/admin/AdminPermissions.scss';\n\nconst TasksTab = ({ projectTasks, onCreateTask, onReassignTask, onEditTask, onShowTaskDetail, onDeleteTask, currentUserRole }) => {\n    const [expandedTasks, setExpandedTasks] = useState(new Set());\n    \n    const toggleTaskExpansion = (taskId) => {\n        const newExpanded = new Set(expandedTasks);\n        if (newExpanded.has(taskId)) {\n            newExpanded.delete(taskId);\n        } else {\n            newExpanded.add(taskId);\n        }\n        setExpandedTasks(newExpanded);\n    };\n    \n    return (\n        <div className=\"tasks-tab\">\n            <div className=\"tab-header\">\n                <h3>Gestion des Tâches</h3>\n                <div className=\"tab-actions\">\n                    {authService.canModifyTasks(currentUserRole) && (\n                        <button \n                            className=\"btn-primary\"\n                            onClick={onCreateTask}\n                        >\n                            Créer une nouvelle tâche\n                        </button>\n                    )}\n                    {authService.isManager(currentUserRole) && (\n                        <div className=\"manager-info\">\n                            <span className=\"info-text\">👁️ Mode consultation uniquement</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n            \n            <div className=\"project-tasks\">\n                <h4>Tâches du projet</h4>\n                {projectTasks.length === 0 ? (\n                    <p>Aucune tâche trouvée dans ce projet.</p>\n                ) : (\n                    <div className=\"tasks-list\">\n                        {projectTasks.map(task => (\n                            <div key={task.id} className=\"task-item\">\n                                <div className=\"task-header\">\n                                    <div className=\"task-title-section\" onClick={() => onShowTaskDetail && onShowTaskDetail(task)}>\n                                        <h5>{task.title}</h5>\n                                    </div>\n                                    <div className=\"task-header-right\">\n                                        <span className={`priority priority-${task.priority || 'medium'}`}>\n                                            {task.priority || 'medium'}\n                                        </span>\n                                        <button \n                                            className=\"btn-toggle-actions\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                toggleTaskExpansion(task.id);\n                                            }}\n                                            title=\"Afficher/Masquer les actions\"\n                                        >\n                                            {expandedTasks.has(task.id) ? '−' : '+'}\n                                        </button>\n                                    </div>\n                                </div>\n                                <p className=\"task-description\">{task.description || 'Aucune description'}</p>\n                                <div className=\"task-meta\">\n                                    <span className=\"assigned-to\">\n                                        Assignée à: {task.assignedTo ? (typeof task.assignedTo === 'object' ? `${task.assignedTo.firstname} ${task.assignedTo.lastname}` : task.assignedTo) : 'En attente d\\'assignation'}\n                                    </span>\n                                    <span className=\"created-at\">\n                                        Créée le: {new Date(task.createdAt).toLocaleDateString('fr-FR')}\n                                    </span>\n                                    <span className=\"estimated-hours\">\n                                        Heures estimées: {task.estimatedHours || 1}h\n                                    </span>\n                                    <span className=\"task-level\">\n                                        Niveau: {task.level || 'intermediate'}\n                                    </span>\n                                </div>\n                                <div className={`task-actions ${expandedTasks.has(task.id) ? 'expanded' : 'collapsed'}`}>\n                                    <button \n                                        className=\"btn-view\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            onShowTaskDetail && onShowTaskDetail(task);\n                                        }}\n                                        title=\"Voir les détails de cette tâche\"\n                                    >\n                                        Voir\n                                    </button>\n                                    {authService.canModifyTasks(currentUserRole) && (\n                                        <>\n                                            <button \n                                                className=\"btn-edit\"\n                                                onClick={(e) => {\n                                                    e.stopPropagation();\n                                                    onEditTask && onEditTask(task);\n                                                }}\n                                                title=\"Modifier cette tâche\"\n                                            >\n                                                Modifier\n                                            </button>\n                                            <button \n                                                className=\"btn-reassign\"\n                                                onClick={(e) => {\n                                                    e.stopPropagation();\n                                                    onReassignTask(task);\n                                                }}\n                                                title=\"Réassigner cette tâche\"\n                                            >\n                                                Réassigner\n                                            </button>\n                                            <button \n                                                className=\"btn-delete\"\n                                                onClick={(e) => {\n                                                    e.stopPropagation();\n                                                    if (window.confirm('Êtes-vous sûr de vouloir supprimer cette tâche ?')) {\n                                                        onDeleteTask && onDeleteTask(task.id);\n                                                    }\n                                                }}\n                                                title=\"Supprimer cette tâche\"\n                                            >\n                                                Supprimer\n                                            </button>\n                                        </>\n                                    )}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TasksTab;\n","import React, { useState } from 'react';\nimport { dashboardServices } from '../../services/dashboard/dashboardServices';\n\nconst UserProfileModal = ({ isOpen, onClose, user, projectId, projectUsers, projectTasks, onUserUpdated }) => {\n    const [selectedRole, setSelectedRole] = useState(user.role);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n\n    const handleRoleChange = async () => {\n        if (selectedRole === user.role) return;\n\n        setLoading(true);\n        setError('');\n        setSuccess('');\n\n        try {\n            const response = await dashboardServices.updateUserRole(projectId, user.id, selectedRole);\n\n            if (response.success) {\n                setSuccess('Rôle mis à jour avec succès');\n                onUserUpdated();\n            } else {\n                setError(response.error || 'Erreur lors de la mise à jour du rôle');\n            }\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la mise à jour du rôle');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRemoveTask = async (taskId) => {\n        if (!window.confirm('Êtes-vous sûr de vouloir supprimer cette tâche ?')) return;\n\n        setLoading(true);\n        setError('');\n\n        try {\n            const response = await dashboardServices.deleteTask(taskId);\n\n            if (response.success) {\n                setSuccess('Tâche supprimée avec succès');\n                onUserUpdated();\n            } else {\n                setError(response.error || 'Erreur lors de la suppression de la tâche');\n            }\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la suppression de la tâche');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const getRoleDisplayName = (role) => {\n        switch (role) {\n            case 'responsable_projet':\n                return 'Responsable de Projet';\n            case 'manager':\n                return 'Manager';\n            case 'collaborateur':\n                return 'Collaborateur';\n            default:\n                return role;\n        }\n    };\n\n    const userTasks = projectTasks.filter(task =>\n        task.assignedTo &&\n        (typeof task.assignedTo === 'object' ?\n            task.assignedTo.id === user.id :\n            task.assignedTo === user.id\n        )\n    );\n\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content user-profile-modal\">\n                <div className=\"modal-header\">\n                    <h2>Profil de {user.firstname} {user.lastname}</h2>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n\n                <div className=\"user-profile-content\">\n                    <div className=\"user-info-section\">\n                        <div className=\"user-basic-info\">\n                            <h3>Informations personnelles</h3>\n                            <div className=\"info-grid\">\n                                <div className=\"info-item\">\n                                    <label>Nom complet:</label>\n                                    <span>{user.firstname} {user.lastname}</span>\n                                </div>\n                                <div className=\"info-item\">\n                                    <label>Email:</label>\n                                    <span>{user.email}</span>\n                                </div>\n                                <div className=\"info-item\">\n                                    <label>Rôle actuel:</label>\n                                    <span className={`role-badge role-${user.role}`}>\n                                        {getRoleDisplayName(user.role)}\n                                    </span>\n                                </div>\n                                <div className=\"info-item\">\n                                    <label>Date d'adhésion:</label>\n                                    <span>{new Date(user.joinedAt).toLocaleDateString('fr-FR')}</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"user-role-management\">\n                            <h3>Gestion du rôle</h3>\n                            <div className=\"role-selector\">\n                                <label htmlFor=\"role-select\">Changer le rôle:</label>\n                                <select\n                                    id=\"role-select\"\n                                    value={selectedRole}\n                                    onChange={(e) => setSelectedRole(e.target.value)}\n                                    disabled={loading}\n                                >\n                                    <option value=\"collaborateur\">Collaborateur</option>\n                                    <option value=\"manager\">Manager</option>\n                                    <option value=\"responsable_projet\">Responsable de Projet</option>\n                                </select>\n                                <button\n                                    className=\"btn-primary\"\n                                    onClick={handleRoleChange}\n                                    disabled={loading || selectedRole === user.role}\n                                >\n                                    {loading ? 'Mise à jour...' : 'Mettre à jour le rôle'}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"user-skills-section\">\n                        <h3>Compétences</h3>\n                        <div className=\"skills-list\">\n                            {user.skills && user.skills.length > 0 ? (\n                                user.skills.map(skill => (\n                                    <span key={skill.id} className=\"skill-tag\">\n                                        {skill.name}\n                                    </span>\n                                ))\n                            ) : (\n                                <p className=\"no-skills\">Aucune compétence définie</p>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"user-tasks-section\">\n                        <h3>Tâches assignées ({userTasks.length})</h3>\n                        {userTasks.length === 0 ? (\n                            <p className=\"no-tasks\">Aucune tâche assignée</p>\n                        ) : (\n                            <div className=\"tasks-list\">\n                                {userTasks.map(task => (\n                                    <div key={task.id} className=\"task-item\">\n                                        <div className=\"task-header\">\n                                            <h4>{task.title}</h4>\n                                            <span className={`priority priority-${task.priority}`}>\n                                                {task.priority}\n                                            </span>\n                                        </div>\n                                        <p className=\"task-description\">{task.description || 'Aucune description'}</p>\n                                        <div className=\"task-meta\">\n                                            <span className=\"task-status\">Statut: {task.status}</span>\n                                            <span className=\"task-created\">\n                                                Créée le: {new Date(task.createdAt).toLocaleDateString('fr-FR')}\n                                            </span>\n                                        </div>\n                                        <div className=\"task-actions\">\n                                            <button\n                                                className=\"btn-danger btn-small\"\n                                                onClick={() => handleRemoveTask(task.id)}\n                                                disabled={loading}\n                                                title=\"Supprimer cette tâche\"\n                                            >\n                                                🗑️ Supprimer\n                                            </button>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"user-stats-section\">\n                        <h3>Statistiques</h3>\n                        <div className=\"stats-grid\">\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">{userTasks.length}</span>\n                                <span className=\"stat-label\">Tâches assignées</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">\n                                    {userTasks.filter(task => task.status === 'completed').length}\n                                </span>\n                                <span className=\"stat-label\">Tâches terminées</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">\n                                    {user.skills ? user.skills.length : 0}\n                                </span>\n                                <span className=\"stat-label\">Compétences</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {error && <div className=\"error-message\">{error}</div>}\n                {success && <div className=\"success-message\">{success}</div>}\n\n                <div className=\"modal-footer\">\n                    <button type=\"button\" className=\"btn-secondary\" onClick={onClose}>\n                        Fermer\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserProfileModal;\n","import React from 'react';\n\nconst WorkloadBar = ({ currentHours, maxHours, user }) => {\n    const percentage = maxHours > 0 ? (currentHours / maxHours) * 100 : 0;\n    \n    let barColor = '#10B981';\n    \n    if (percentage >= 90) {\n        barColor = '#EF4444';\n    } else if (percentage >= 75) {\n        barColor = '#F59E0B';\n    } else if (percentage >= 50) {\n        barColor = '#3B82F6';\n    }\n    \n    return (\n        <div className=\"workload-bar-container\">\n            <div className=\"workload-info\">\n                <span className=\"user-name\">{user.firstname} {user.lastname}</span>\n                <span className=\"workload-hours\">\n                    {currentHours}h / {maxHours}h\n                </span>\n            </div>\n            <div className=\"workload-bar\">\n                <div \n                    className=\"workload-fill\"\n                    style={{\n                        width: `${Math.min(percentage, 100)}%`,\n                        backgroundColor: barColor\n                    }}\n                />\n            </div>\n            <div className=\"workload-percentage\">\n                {percentage.toFixed(1)}%\n            </div>\n        </div>\n    );\n};\n\nexport default WorkloadBar;\n","import React, { useState } from 'react';\nimport UserProfileModal from './UserProfileModal';\nimport WorkloadBar from './WorkloadBar';\nimport authService from '../../services/authServices';\nimport '../../assets/styles/compenents/admin/UserProfileModal.scss';\nimport '../../assets/styles/compenents/admin/WorkloadBar.scss';\nimport '../../assets/styles/compenents/admin/AdminPermissions.scss';\n\nconst UsersTab = ({ projectUsers, projectTasks, onAddUser, onUserUpdated, selectedProject, currentUserRole }) => {\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [showUserProfile, setShowUserProfile] = useState(false);\n\n    const getRoleDisplayName = (role) => {\n        if (!role) return 'Non défini';\n        \n        const roleStr = typeof role === 'string' ? role : String(role);\n        \n        switch (roleStr) {\n            case 'Responsable de Projet':\n            case 'responsable_projet':\n                return 'Responsable de Projet';\n            case 'Manager':\n            case 'manager':\n                return 'Manager';\n            case 'Collaborateur':\n            case 'collaborateur':\n                return 'Collaborateur';\n            default:\n                return roleStr;\n        }\n    };\n\n    const getWorkloadForUser = (userId) => {\n        return projectTasks\n            .filter(task => \n                task.assignedTo && \n                (typeof task.assignedTo === 'object' ? task.assignedTo.id === userId : task.assignedTo === userId)\n            )\n            .reduce((total, task) => total + (task.estimatedHours || 1), 0);\n    };\n\n    return (\n        <div className=\"users-tab\">\n            <div className=\"tab-header\">\n                <h3>Gestion des Utilisateurs</h3>\n                <div className=\"tab-actions\">\n                    {authService.canManageUsers(currentUserRole) && (\n                        <button \n                            className=\"btn-primary\"\n                            onClick={onAddUser}\n                        >\n                            + Ajouter un utilisateur\n                        </button>\n                    )}\n                    {authService.isManager(currentUserRole) && (\n                        <div className=\"manager-info\">\n                            <span className=\"info-text\">Mode consultation uniquement</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n            \n            <div className=\"project-users-detailed\">\n                <h4>Utilisateurs du projet</h4>\n                {projectUsers.length === 0 ? (\n                    <p>Aucun utilisateur trouvé dans ce projet.</p>\n                ) : (\n                    <div className=\"users-detailed-list\">\n                                                            {projectUsers.map(user => (\n                                        <div \n                                            key={user.id} \n                                            className={`user-detailed-item ${authService.canManageUsers(currentUserRole) ? 'clickable' : 'readonly'}`}\n                                            onClick={authService.canManageUsers(currentUserRole) ? () => {\n                                                setSelectedUser(user);\n                                                setShowUserProfile(true);\n                                            } : undefined}\n                                            title={authService.canManageUsers(currentUserRole) ? \n                                                \"Cliquer pour voir le profil détaillé\" : \n                                                \"Mode consultation uniquement - Modification non autorisée\"\n                                            }\n                                        >\n                                <div className=\"user-header\">\n                                    <div className=\"user-info\">\n                                        <strong>{user.firstname} {user.lastname}</strong>\n                                        <span className=\"user-email\">{user.email}</span>\n                                    </div>\n                                    <span className={`user-role role-${user.role}`}>\n                                        {getRoleDisplayName(user.role)}\n                                    </span>\n                                </div>\n                                \n                                <div className=\"user-details\">\n                                    <div className=\"user-section\">\n                                        <h5>Tâches assignées</h5>\n                                        <div className=\"user-tasks\">\n                                            {projectTasks.filter(task => \n                                                task.assignedTo && \n                                                (typeof task.assignedTo === 'object' ? \n                                                    task.assignedTo.id === user.id : \n                                                    task.assignedTo === user.id)\n                                            ).length === 0 ? (\n                                                <p className=\"no-tasks\">Aucune tâche assignée</p>\n                                            ) : (\n                                                projectTasks.filter(task => \n                                                    task.assignedTo && \n                                                    (typeof task.assignedTo === 'object' ? \n                                                        task.assignedTo.id === user.id : \n                                                        task.assignedTo === user.id)\n                                                ).map(task => (\n                                                    <div key={task.id} className=\"user-task-item\">\n                                                        <span className=\"task-title\">{task.title}</span>\n                                                        <span className={`task-priority priority-${task.priority}`}>\n                                                            {task.priority}\n                                                        </span>\n                                                        <span className=\"task-status\">{task.status}</span>\n                                                    </div>\n                                                ))\n                                            )}\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"user-section\">\n                                        <h5>Compétences</h5>\n                                        <div className=\"user-skills\">\n                                            {user.skills && user.skills.length > 0 ? (\n                                                user.skills.map(skill => (\n                                                    <span key={skill.id} className=\"skill-tag\">\n                                                        {skill.name}\n                                                    </span>\n                                                ))\n                                            ) : (\n                                                <p className=\"no-skills\">Aucune compétence définie</p>\n                                            )}\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"user-section\">\n                                        <h5>Charge de travail</h5>\n                                        <WorkloadBar \n                                            currentHours={getWorkloadForUser(user.id)}\n                                            maxHours={user.maxWorkloadHours || 40}\n                                            user={user}\n                                        />\n                                    </div>\n                                    \n                                    <div className=\"user-section\">\n                                        <h5>Statistiques</h5>\n                                        <div className=\"user-stats\">\n                                            <div className=\"stat-item\">\n                                                <span className=\"stat-number\">\n                                                    {projectTasks.filter(task => \n                                                        task.assignedTo && \n                                                        (typeof task.assignedTo === 'object' ? \n                                                            task.assignedTo.id === user.id : \n                                                            task.assignedTo === user.id)\n                                                    ).length}\n                                                </span>\n                                                <span className=\"stat-label\">Tâches</span>\n                                            </div>\n                                            <div className=\"stat-item\">\n                                                <span className=\"stat-number\">\n                                                    {user.skills ? user.skills.length : 0}\n                                                </span>\n                                                <span className=\"stat-label\">Compétences</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n\n            {showUserProfile && selectedUser && selectedProject && (\n                <UserProfileModal\n                    isOpen={showUserProfile}\n                    onClose={() => {\n                        setShowUserProfile(false);\n                        setSelectedUser(null);\n                    }}\n                    user={selectedUser}\n                    projectId={selectedProject.id}\n                    projectUsers={projectUsers}\n                    projectTasks={projectTasks}\n                    onUserUpdated={onUserUpdated}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default UsersTab;\n","import React from 'react';\nimport OverviewTab from './OverviewTab';\nimport TasksTab from './TasksTab';\nimport UsersTab from './UsersTab';\n\nconst AdminTabs = ({ \n    activeTab, \n    setActiveTab, \n    projectTasks, \n    projectUsers, \n    onCreateTask, \n    onEditTask,\n    onShowTaskDetail,\n    onReassignTask,\n    onDeleteTask,\n    onAddUser, \n    onUserUpdated,\n    onNavigateToDashboard,\n    selectedProject,\n    currentUserRole\n}) => {\n    return (\n        <>\n            <div className=\"admin-tabs\">\n                <button \n                    className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('overview')}\n                >\n                    Vue d'ensemble\n                </button>\n                <button \n                    className={`tab-button ${activeTab === 'tasks' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('tasks')}\n                >\n                    Gestion des Tâches\n                </button>\n                <button \n                    className={`tab-button ${activeTab === 'users' ? 'active' : ''}`}\n                    onClick={() => setActiveTab('users')}\n                >\n                    Gestion des Utilisateurs\n                </button>\n            </div>\n\n            <div className=\"tab-content\">\n                {activeTab === 'overview' && (\n                    <OverviewTab \n                        projectTasks={projectTasks}\n                        projectUsers={projectUsers}\n                        onCreateTask={onCreateTask}\n                        onAddUser={onAddUser}\n                        onNavigateToDashboard={onNavigateToDashboard}\n                        currentUserRole={currentUserRole}\n                    />\n                )}\n\n                {activeTab === 'tasks' && (\n                    <TasksTab \n                        projectTasks={projectTasks}\n                        onCreateTask={onCreateTask}\n                        onEditTask={onEditTask}\n                        onShowTaskDetail={onShowTaskDetail}\n                        onReassignTask={onReassignTask}\n                        onDeleteTask={onDeleteTask}\n                        currentUserRole={currentUserRole}\n                    />\n                )}\n\n                {activeTab === 'users' && (\n                    <UsersTab\n                        projectUsers={projectUsers}\n                        projectTasks={projectTasks}\n                        onAddUser={onAddUser}\n                        onUserUpdated={onUserUpdated}\n                        selectedProject={selectedProject}\n                        currentUserRole={currentUserRole}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default AdminTabs;\n","import React, { useState } from 'react';\nimport { dashboardServices } from '../../services/dashboard/dashboardServices';\n\nconst AddUserModal = ({ isOpen, onClose, projectId, onUserAdded }) => {\n    const [newUser, setNewUser] = useState({\n        email: '',\n        role: '',\n        message: ''\n    });\n    const [addUserLoading, setAddUserLoading] = useState(false);\n    const [addUserError, setAddUserError] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        \n        if (!newUser.email || !newUser.role) {\n            setAddUserError('Email et rôle sont requis');\n            return;\n        }\n        \n        setAddUserLoading(true);\n        setAddUserError('');\n        \n        try {\n            const response = await dashboardServices.addUserToProject(projectId, newUser.email, newUser.role);\n            \n            if (response.success) {\n                onUserAdded();\n                \n                setNewUser({ email: '', role: '', message: '' });\n            } else {\n                setAddUserError(response.error || 'Erreur lors de l\\'ajout de l\\'utilisateur');\n            }\n        } catch (err) {\n            setAddUserError(err.message || 'Erreur lors de l\\'ajout de l\\'utilisateur');\n        } finally {\n            setAddUserLoading(false);\n        }\n    };\n\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content add-user-modal\">\n                <div className=\"modal-header\">\n                    <h2>Ajouter un utilisateur au projet</h2>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n                \n                <form onSubmit={handleSubmit} className=\"add-user-form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email de l'utilisateur *</label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            value={newUser.email}\n                            onChange={(e) => setNewUser({...newUser, email: e.target.value})}\n                            placeholder=\"exemple@email.com\"\n                            required\n                        />\n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label htmlFor=\"role\">Rôle dans le projet *</label>\n                        <select\n                            id=\"role\"\n                            value={newUser.role}\n                            onChange={(e) => setNewUser({...newUser, role: e.target.value})}\n                            required\n                        >\n                            <option value=\"\">Sélectionner un rôle</option>\n                            <option value=\"collaborateur\">Collaborateur</option>\n                            <option value=\"manager\">Manager</option>\n                            <option value=\"responsable_projet\">Responsable de Projet</option>\n                        </select>\n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label htmlFor=\"message\">Message d'invitation (optionnel)</label>\n                        <textarea\n                            id=\"message\"\n                            value={newUser.message}\n                            onChange={(e) => setNewUser({...newUser, message: e.target.value})}\n                            placeholder=\"Message personnalisé pour l'invitation...\"\n                            rows=\"3\"\n                        />\n                    </div>\n                    \n                    {addUserError && (\n                        <div className=\"error-message\">{addUserError}</div>\n                    )}\n                    \n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn-secondary\" onClick={onClose}>\n                            Annuler\n                        </button>\n                        <button type=\"submit\" className=\"btn-primary\" disabled={addUserLoading}>\n                            {addUserLoading ? 'Ajout...' : 'Ajouter l\\'utilisateur'}\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default AddUserModal;\n","import React, { useState } from 'react';\nimport { dashboardServices } from '../../services/dashboard/dashboardServices';\n\nconst ReassignTaskModal = ({ isOpen, onClose, task, projectUsers, projectTasks, onTaskReassigned }) => {\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const handleUserSelection = (user) => {\n        setSelectedUser(user);\n    };\n\n    const handleConfirmReassign = async () => {\n        if (!selectedUser) return;\n        \n        setLoading(true);\n        setError('');\n        \n        try {\n            const response = await dashboardServices.updateTask(task.id, {\n                assignedTo: selectedUser.id\n            });\n            \n            if (response.success) {\n                onTaskReassigned();\n            } else {\n                setError('Erreur lors de la réassignation');\n            }\n        } catch (err) {\n            setError(err.message || 'Erreur lors de la réassignation');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content reassign-modal\">\n                <div className=\"modal-header\">\n                    <h2>Réassigner la tâche</h2>\n                    <button className=\"modal-close\" onClick={onClose}>×</button>\n                </div>\n                \n                <div className=\"task-info\">\n                    <h3>{task.title}</h3>\n                    <p><strong>Actuellement assignée à :</strong> {\n                        task.assignedTo ? \n                            (typeof task.assignedTo === 'object' ? \n                                `${task.assignedTo.firstname} ${task.assignedTo.lastname}` : \n                                task.assignedTo\n                            ) : \n                            'Personne'\n                    }</p>\n                </div>\n\n                <div className=\"reassign-section\">\n                    <h4>Choisir un nouvel assigné :</h4>\n                    <div className=\"users-list\">\n                        {projectUsers\n                            .filter(user => user.role === 'collaborateur' || user.role === 'Collaborateur')\n                            .map(user => (\n                                <div \n                                    key={user.id} \n                                    className={`user-option ${selectedUser && selectedUser.id === user.id ? 'selected' : ''} ${\n                                        task.assignedTo && \n                                        (typeof task.assignedTo === 'object' ? \n                                            task.assignedTo.id === user.id : \n                                            task.assignedTo === user.id\n                                        ) ? 'currently-assigned' : ''\n                                    }`}\n                                    onClick={() => handleUserSelection(user)}\n                                >\n                                    <div className=\"user-info\">\n                                        <strong>{user.firstname} {user.lastname}</strong>\n                                        <span className=\"user-email\">{user.email}</span>\n                                        {selectedUser && selectedUser.id === user.id && (\n                                            <span className=\"selection-indicator\">✅ Sélectionné</span>\n                                        )}\n                                    </div>\n                                    <div className=\"user-skills\">\n                                        {user.skills && user.skills.length > 0 ? (\n                                            user.skills.map(skill => (\n                                                <span key={skill.id} className=\"skill-tag\">\n                                                    {skill.name}\n                                                </span>\n                                            ))\n                                        ) : (\n                                            <span className=\"no-skills\">Aucune compétence</span>\n                                        )}\n                                    </div>\n                                    <div className=\"user-workload\">\n                                        <span className=\"workload-label\">Tâches actuelles :</span>\n                                        <span className=\"workload-number\">\n                                            {projectTasks.filter(task => \n                                                task.assignedTo && \n                                                (typeof task.assignedTo === 'object' ? \n                                                    task.assignedTo.id === user.id : \n                                                    task.assignedTo === user.id\n                                                )\n                                            ).length}\n                                        </span>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                    </div>\n                </div>\n\n                {error && <div className=\"error-message\">{error}</div>}\n\n                <div className=\"modal-footer\">\n                    <button \n                        type=\"button\" \n                        className=\"btn-secondary\" \n                        onClick={onClose}\n                    >\n                        Annuler\n                    </button>\n                    <button \n                        type=\"button\" \n                        className=\"btn-primary\" \n                        onClick={handleConfirmReassign}\n                        disabled={!selectedUser || loading}\n                    >\n                        {loading ? 'Réassignation...' : 'Confirmer la réassignation'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ReassignTaskModal;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from '../compenents/includes/header';\nimport Footer from '../compenents/includes/footer';\nimport { dashboardServices } from '../services/dashboard/dashboardServices';\nimport authService from '../services/authServices';\nimport ProjectSelector from '../compenents/Admin/ProjectSelector';\nimport AdminTabs from '../compenents/Admin/AdminTabs';\nimport CreateTaskModal from '../compenents/dashboard/modal/tasks/CreateTaskModal';\nimport TaskModal from '../compenents/dashboard/modal/tasks/TaskModal';\nimport AddUserModal from '../compenents/Admin/AddUserModal';\nimport ReassignTaskModal from '../compenents/Admin/ReassignTaskModal';\n\nimport '../assets/styles/compenents/admin/ProjectSelector.scss';\nimport '../assets/styles/compenents/admin/AdminTabs.scss';\nimport '../assets/styles/compenents/admin/OverviewTab.scss';\nimport '../assets/styles/compenents/admin/TasksTab.scss';\nimport '../assets/styles/compenents/admin/UsersTab.scss';\nimport '../assets/styles/compenents/admin/AddUserModal.scss';\nimport '../assets/styles/compenents/admin/ReassignTaskModal.scss';\nimport '../assets/styles/Admin.scss';\n\nconst Admin = () => {\n    const [projects, setProjects] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [currentUser, setCurrentUser] = useState(null);\n    \n    const [selectedProject, setSelectedProject] = useState(null);\n    const [activeTab, setActiveTab] = useState('overview');\n    \n    const [projectTasks, setProjectTasks] = useState([]);\n    const [projectUsers, setProjectUsers] = useState([]);\n    \n    const [showCreateTaskModal, setShowCreateTaskModal] = useState(false);\n    const [showEditTaskModal, setShowEditTaskModal] = useState(false);\n    const [selectedTaskForEdit, setSelectedTaskForEdit] = useState(null);\n    const [showTaskDetailModal, setShowTaskDetailModal] = useState(false);\n    const [selectedTaskForDetail, setSelectedTaskForDetail] = useState(null);\n    const [showReassignModal, setShowReassignModal] = useState(false);\n    const [selectedTaskForReassign, setSelectedTaskForReassign] = useState(null);\n    const [showAddUserModal, setShowAddUserModal] = useState(false);\n    \n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            const isAuth = await authService.isAuthenticated();\n            if (!isAuth) {\n                navigate('/login');\n                return;\n            }\n            await fetchData();\n        };\n        \n        checkAuth();\n    }, [navigate]);\n\n    const [currentUserRole, setCurrentUserRole] = useState(null);\n    const [adminAccessibleProjects, setAdminAccessibleProjects] = useState([]);\n\n    // Vérifier les permissions admin globalement\n    useEffect(() => {\n        if (projects.length > 0 && currentUser) {\n            // Vérif si utilisateur est responsable ou manager a un projet\n            const canAccess = authService.canAccessAdminGlobally(projects, currentUser.id);\n            \n            if (!canAccess) {\n                setError('Accès refusé : Vous devez être manager ou responsable de projet sur au moins un projet pour accéder à la section Admin.');\n                setLoading(false);\n                return;\n            }\n\n            // Filtrer les projets accessible\n            const accessibleProjects = authService.getAdminAccessibleProjects(projects, currentUser.id);\n            setAdminAccessibleProjects(accessibleProjects);\n            \n            if (accessibleProjects.length > 0 && !selectedProject) {\n                setSelectedProject(accessibleProjects[0]);\n            }\n        }\n    }, [projects, currentUser, selectedProject]);\n \n    useEffect(() => {\n        if (selectedProject && currentUser) {\n            const userRole = authService.getUserRoleInProject(selectedProject, currentUser.id);\n            setCurrentUserRole(userRole);\n        }\n    }, [selectedProject, currentUser]);\n \n    useEffect(() => {\n        if (selectedProject) {\n            fetchProjectData(selectedProject.id);\n        }\n    }, [selectedProject]);\n\n    const fetchData = async () => {\n        try {\n            setLoading(true);\n            const [projectsData, profileData] = await Promise.all([\n                dashboardServices.getProjects(),\n                dashboardServices.getProfile()\n            ]);\n            \n            setProjects(projectsData.projects || []);\n            setCurrentUser(profileData.user || profileData);\n            \n            const savedProject = localStorage.getItem('adminSelectedProject');\n            if (savedProject) {\n                const project = JSON.parse(savedProject);\n                const projectExists = projectsData.projects?.find(p => p.id === project.id);\n                if (projectExists) {\n                    setSelectedProject(project);\n                }\n            }\n            \n            if (!localStorage.getItem('adminSelectedProject') && projectsData.projects?.length > 0) {\n                const firstProject = projectsData.projects[0];\n                setSelectedProject(firstProject);\n                localStorage.setItem('adminSelectedProject', JSON.stringify(firstProject));\n            }\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchProjectData = async (projectId) => {\n        try {\n            const tasksData = await dashboardServices.getTasks(projectId);\n            if (tasksData && tasksData.tasks) {\n                const validatedTasks = tasksData.tasks.map(task => ({\n                    id: task.id || 0,\n                    title: task.title || 'Sans titre',\n                    description: task.description || '',\n                    priority: task.priority || 'medium',\n                    level: task.level || 'intermediate',\n                    estimatedHours: task.estimatedHours || 1,\n                    assignedTo: task.assignedTo || null,\n                    requiredSkills: task.requiredSkills || [],\n                    createdAt: task.createdAt || new Date().toISOString()\n                }));\n                \n                const sortedTasks = validatedTasks.sort((a, b) => \n                    new Date(b.createdAt) - new Date(a.createdAt)\n                );\n                setProjectTasks(sortedTasks);\n            }\n\n            const usersData = await dashboardServices.getProjectUsers(projectId);\n            if (usersData && usersData.users) {\n                const validatedUsers = usersData.users.map(user => ({\n                    id: user.id || 0,\n                    firstname: user.firstname || '',\n                    lastname: user.lastname || '',\n                    email: user.email || '',\n                    role: user.role || 'collaborateur',\n                    skills: user.skills || []\n                }));\n                \n                setProjectUsers(validatedUsers);\n            }\n        } catch (err) {\n            console.error('Error fetching project data:', err);\n        }\n    };\n\n    const handleProjectChange = (projectId) => {\n        if (projectId) {\n            const project = projects.find(p => p.id === projectId);\n            if (project) {\n                setSelectedProject(project);\n                localStorage.setItem('adminSelectedProject', JSON.stringify(project));\n            }\n        } else {\n            setSelectedProject(null);\n            localStorage.removeItem('adminSelectedProject');\n        }\n        setActiveTab('overview');\n    };\n\n    const handleCreateTask = () => {\n        setShowCreateTaskModal(true);\n    };\n\n    const handleReassignTask = (task) => {\n        setSelectedTaskForReassign(task);\n        setShowReassignModal(true);\n    };\n\n    const handleAddUser = () => {\n        setShowAddUserModal(true);\n    };\n\n    const handleTaskCreated = async () => {\n        setShowCreateTaskModal(false);\n        if (selectedProject) {\n            await fetchProjectData(selectedProject.id);\n        }\n    };\n\n    const handleUserAdded = async () => {\n        setShowAddUserModal(false);\n        if (selectedProject) {\n            await fetchProjectData(selectedProject.id);\n        }\n    };\n\n    const handleTaskReassigned = async () => {\n        setShowReassignModal(false);\n        setSelectedTaskForReassign(null);\n        if (selectedProject) {\n            await fetchProjectData(selectedProject.id);\n        }\n    };\n\n    const handleEditTask = (task) => {\n        setSelectedTaskForEdit(task);\n        setShowEditTaskModal(true);\n    };\n\n    const handleShowTaskDetail = (task) => {\n        setSelectedTaskForDetail(task);\n        setShowTaskDetailModal(true);\n    };\n\n    const handleTaskUpdated = async () => {\n        setShowEditTaskModal(false);\n        setSelectedTaskForEdit(null);\n        if (selectedProject) {\n            await fetchProjectData(selectedProject.id);\n        }\n    };\n\n    const handleUserUpdated = async () => {\n        if (selectedProject) {\n            await fetchProjectData(selectedProject.id);\n        }\n    };\n\n    const handleDeleteTask = async (taskId) => {\n        try {\n            await dashboardServices.deleteTask(taskId);\n            if (selectedProject) {\n                await fetchProjectData(selectedProject.id);\n            }\n        } catch (err) {\n            setError(err.message);\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"admin-container\">\n                <Header />\n                <div className=\"admin-content\">\n                    <div className=\"loading-spinner\"></div>\n                    <p>Chargement...</p>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"admin-container\">\n                <Header />\n                <div className=\"admin-content\">\n                    <div className=\"error-message\">\n                        <p>Erreur: {error}</p>\n                        {error.includes('Accès refusé') ? (\n                            <p className=\"error-redirect\">Redirection vers le tableau de bord dans 3 secondes...</p>\n                        ) : (\n                            <button onClick={fetchData}>Réessayer</button>\n                        )}\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"admin-container\">\n            <Header />\n            <div className=\"admin-content\">\n                <ProjectSelector \n                    projects={adminAccessibleProjects}\n                    selectedProject={selectedProject}\n                    onProjectChange={handleProjectChange}\n                />\n\n                {selectedProject ? (\n                                                <AdminTabs\n                                activeTab={activeTab}\n                                setActiveTab={setActiveTab}\n                                projectTasks={projectTasks}\n                                projectUsers={projectUsers}\n                        selectedProject={selectedProject}\n                        currentUserRole={currentUserRole}\n                        onCreateTask={handleCreateTask}\n                                onEditTask={handleEditTask}\n                                onShowTaskDetail={handleShowTaskDetail}\n                                onReassignTask={handleReassignTask}\n                                onDeleteTask={handleDeleteTask}\n                                onAddUser={handleAddUser}\n                                onUserUpdated={handleUserUpdated}\n                                onNavigateToDashboard={() => navigate(`/dashboard?project=${selectedProject}`)}\n                            />\n                ) : (\n                    <div className=\"no-project-selected\">\n                        <h2>Aucun projet accessible</h2>\n                        <p>Vous devez être manager ou responsable de projet pour accéder à l'administration.</p>\n                    </div>\n                )}\n            </div>\n            <Footer />\n\n            {showCreateTaskModal && selectedProject && (\n                <CreateTaskModal\n                    isOpen={showCreateTaskModal}\n                    onClose={() => setShowCreateTaskModal(false)}\n                    projectId={selectedProject.id}\n                    onTaskCreated={handleTaskCreated}\n                    projectUsers={projectUsers}\n                    projectTasks={projectTasks}\n                    autoAssign={true}\n                />\n            )}\n\n            {showAddUserModal && selectedProject && (\n                <AddUserModal\n                    isOpen={showAddUserModal}\n                    onClose={() => setShowAddUserModal(false)}\n                    projectId={selectedProject.id}\n                    onUserAdded={handleUserAdded}\n                />\n            )}\n\n            {showReassignModal && selectedTaskForReassign && (\n                <ReassignTaskModal\n                    isOpen={showReassignModal}\n                    onClose={() => setShowReassignModal(false)}\n                    task={selectedTaskForReassign}\n                    projectUsers={projectUsers}\n                    projectTasks={projectTasks}\n                    onTaskReassigned={handleTaskReassigned}\n                />\n            )}\n\n            {showEditTaskModal && selectedTaskForEdit && selectedProject && (\n                <TaskModal\n                    isOpen={showEditTaskModal}\n                    onClose={() => {\n                        setShowEditTaskModal(false);\n                        setSelectedTaskForEdit(null);\n                    }}\n                    onTaskUpdate={async (taskId, taskData) => {\n                        try {\n                            await dashboardServices.updateTask(taskId, taskData);\n                            await handleTaskUpdated();\n                        } catch (err) {\n                            console.error('Erreur lors de la mise à jour de la tâche:', err);\n                        }\n                    }}\n                    task={selectedTaskForEdit}\n                    project={selectedProject}\n                    mode=\"edit\"\n                />\n            )}\n\n            {showTaskDetailModal && selectedTaskForDetail && selectedProject && (\n                <TaskModal\n                    isOpen={showTaskDetailModal}\n                    onClose={() => {\n                        setShowTaskDetailModal(false);\n                        setSelectedTaskForDetail(null);\n                    }}\n                    onTaskUpdate={async (taskId, taskData) => {\n                        try {\n                            await dashboardServices.updateTask(taskId, taskData);\n                            await handleTaskUpdated();\n                        } catch (err) {\n                            console.error('Erreur lors de la mise à jour de la tâche:', err);\n                        }\n                    }}\n                    task={selectedTaskForDetail}\n                    project={selectedProject}\n                    mode=\"view\"\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Admin;\n"],"names":["_ref","projects","selectedProject","onProjectChange","_jsxs","className","children","_jsx","value","id","onChange","e","target","parseInt","map","project","name","projectTasks","projectUsers","onCreateTask","onAddUser","onNavigateToDashboard","length","onReassignTask","onEditTask","onShowTaskDetail","onDeleteTask","currentUserRole","expandedTasks","setExpandedTasks","useState","Set","authService","canModifyTasks","onClick","isManager","task","title","concat","priority","stopPropagation","taskId","newExpanded","has","delete","add","toggleTaskExpansion","description","assignedTo","firstname","lastname","Date","createdAt","toLocaleDateString","estimatedHours","level","_Fragment","window","confirm","isOpen","onClose","user","projectId","onUserUpdated","selectedRole","setSelectedRole","role","loading","setLoading","error","setError","success","setSuccess","userTasks","filter","email","getRoleDisplayName","joinedAt","htmlFor","disabled","async","response","dashboardServices","updateUserRole","err","message","skills","skill","status","deleteTask","handleRemoveTask","type","currentHours","maxHours","percentage","barColor","style","width","Math","min","backgroundColor","toFixed","selectedUser","setSelectedUser","showUserProfile","setShowUserProfile","roleStr","String","canManageUsers","undefined","WorkloadBar","userId","reduce","total","maxWorkloadHours","UserProfileModal","activeTab","setActiveTab","OverviewTab","TasksTab","UsersTab","onUserAdded","newUser","setNewUser","addUserLoading","setAddUserLoading","addUserError","setAddUserError","onSubmit","preventDefault","addUserToProject","_objectSpread","placeholder","required","rows","onTaskReassigned","handleUserSelection","updateTask","Admin","setProjects","currentUser","setCurrentUser","setSelectedProject","setProjectTasks","setProjectUsers","showCreateTaskModal","setShowCreateTaskModal","showEditTaskModal","setShowEditTaskModal","selectedTaskForEdit","setSelectedTaskForEdit","showTaskDetailModal","setShowTaskDetailModal","selectedTaskForDetail","setSelectedTaskForDetail","showReassignModal","setShowReassignModal","selectedTaskForReassign","setSelectedTaskForReassign","showAddUserModal","setShowAddUserModal","navigate","useNavigate","useEffect","isAuthenticated","fetchData","checkAuth","setCurrentUserRole","adminAccessibleProjects","setAdminAccessibleProjects","canAccessAdminGlobally","accessibleProjects","getAdminAccessibleProjects","userRole","getUserRoleInProject","fetchProjectData","_projectsData$project2","projectsData","profileData","Promise","all","getProjects","getProfile","savedProject","localStorage","getItem","_projectsData$project","JSON","parse","find","p","firstProject","setItem","stringify","tasksData","getTasks","tasks","sortedTasks","requiredSkills","toISOString","sort","a","b","usersData","getProjectUsers","users","validatedUsers","console","handleTaskUpdated","Header","Footer","includes","ProjectSelector","removeItem","AdminTabs","handleCreateTask","handleAddUser","CreateTaskModal","onTaskCreated","autoAssign","AddUserModal","ReassignTaskModal","TaskModal","onTaskUpdate","taskData","mode"],"sourceRoot":""}